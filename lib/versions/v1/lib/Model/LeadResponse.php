<?php
/**
 * LeadResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Pipedrive\versions\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pipedrive API v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Pipedrive\versions\v1\Model;

use ArrayAccess;
use JsonException;
use JsonSerializable;
use Pipedrive\versions\v1\Traits\RawData;
use Pipedrive\versions\v1\ObjectSerializer;

/**
 * LeadResponse Class Doc Comment
 *
 * @category Class
 * @package  Pipedrive\versions\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LeadResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    use RawData;

    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'LeadResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string>
      * @phpsalm-var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'title' => 'string',
        'owner_id' => 'int',
        'creator_id' => 'int',
        'label_ids' => 'string[]',
        'person_id' => 'int',
        'organization_id' => 'int',
        'source_name' => 'string',
        'origin' => 'string',
        'origin_id' => 'string',
        'channel' => 'int',
        'channel_id' => 'string',
        'is_archived' => 'bool',
        'was_seen' => 'bool',
        'value' => '\Pipedrive\versions\v1\Model\LeadValue',
        'expected_close_date' => '\DateTime',
        'next_activity_id' => 'int',
        'add_time' => '\DateTime',
        'update_time' => '\DateTime',
        'visible_to' => '\Pipedrive\versions\v1\Model\VisibleTo',
        'cc_email' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'title' => null,
        'owner_id' => null,
        'creator_id' => null,
        'label_ids' => 'uuid',
        'person_id' => null,
        'organization_id' => null,
        'source_name' => null,
        'origin' => null,
        'origin_id' => null,
        'channel' => null,
        'channel_id' => null,
        'is_archived' => null,
        'was_seen' => null,
        'value' => null,
        'expected_close_date' => 'date',
        'next_activity_id' => null,
        'add_time' => 'date-time',
        'update_time' => 'date-time',
        'visible_to' => null,
        'cc_email' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @phpstan-return array<string, string|null>
     * @psalm-return array<string, string|null>
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'title' => 'title',
        'owner_id' => 'owner_id',
        'creator_id' => 'creator_id',
        'label_ids' => 'label_ids',
        'person_id' => 'person_id',
        'organization_id' => 'organization_id',
        'source_name' => 'source_name',
        'origin' => 'origin',
        'origin_id' => 'origin_id',
        'channel' => 'channel',
        'channel_id' => 'channel_id',
        'is_archived' => 'is_archived',
        'was_seen' => 'was_seen',
        'value' => 'value',
        'expected_close_date' => 'expected_close_date',
        'next_activity_id' => 'next_activity_id',
        'add_time' => 'add_time',
        'update_time' => 'update_time',
        'visible_to' => 'visible_to',
        'cc_email' => 'cc_email'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'title' => 'setTitle',
        'owner_id' => 'setOwnerId',
        'creator_id' => 'setCreatorId',
        'label_ids' => 'setLabelIds',
        'person_id' => 'setPersonId',
        'organization_id' => 'setOrganizationId',
        'source_name' => 'setSourceName',
        'origin' => 'setOrigin',
        'origin_id' => 'setOriginId',
        'channel' => 'setChannel',
        'channel_id' => 'setChannelId',
        'is_archived' => 'setIsArchived',
        'was_seen' => 'setWasSeen',
        'value' => 'setValue',
        'expected_close_date' => 'setExpectedCloseDate',
        'next_activity_id' => 'setNextActivityId',
        'add_time' => 'setAddTime',
        'update_time' => 'setUpdateTime',
        'visible_to' => 'setVisibleTo',
        'cc_email' => 'setCcEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'title' => 'getTitle',
        'owner_id' => 'getOwnerId',
        'creator_id' => 'getCreatorId',
        'label_ids' => 'getLabelIds',
        'person_id' => 'getPersonId',
        'organization_id' => 'getOrganizationId',
        'source_name' => 'getSourceName',
        'origin' => 'getOrigin',
        'origin_id' => 'getOriginId',
        'channel' => 'getChannel',
        'channel_id' => 'getChannelId',
        'is_archived' => 'getIsArchived',
        'was_seen' => 'getWasSeen',
        'value' => 'getValue',
        'expected_close_date' => 'getExpectedCloseDate',
        'next_activity_id' => 'getNextActivityId',
        'add_time' => 'getAddTime',
        'update_time' => 'getUpdateTime',
        'visible_to' => 'getVisibleTo',
        'cc_email' => 'getCcEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     * @phpstan-var array<int|string, mixed>
     * @psalm-var array<int|string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @phpstan-param array<string, mixed>|null $data
     * @psalm-param array<string, mixed>|null $data
     * @param array|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['owner_id'] = $data['owner_id'] ?? null;
        $this->container['creator_id'] = $data['creator_id'] ?? null;
        $this->container['label_ids'] = $data['label_ids'] ?? null;
        $this->container['person_id'] = $data['person_id'] ?? null;
        $this->container['organization_id'] = $data['organization_id'] ?? null;
        $this->container['source_name'] = $data['source_name'] ?? null;
        $this->container['origin'] = $data['origin'] ?? null;
        $this->container['origin_id'] = $data['origin_id'] ?? null;
        $this->container['channel'] = $data['channel'] ?? null;
        $this->container['channel_id'] = $data['channel_id'] ?? null;
        $this->container['is_archived'] = $data['is_archived'] ?? null;
        $this->container['was_seen'] = $data['was_seen'] ?? null;
        $this->container['value'] = $data['value'] ?? null;
        $this->container['expected_close_date'] = $data['expected_close_date'] ?? null;
        $this->container['next_activity_id'] = $data['next_activity_id'] ?? null;
        $this->container['add_time'] = $data['add_time'] ?? null;
        $this->container['update_time'] = $data['update_time'] ?? null;
        $this->container['visible_to'] = $data['visible_to'] ?? null;
        $this->container['cc_email'] = $data['cc_email'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     * @phpstan-return array<int, string>
     * @psalm-return array<int, string>
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['owner_id'] === null) {
            $invalidProperties[] = "'owner_id' can't be null";
        }
        if ($this->container['creator_id'] === null) {
            $invalidProperties[] = "'creator_id' can't be null";
        }
        if ($this->container['label_ids'] === null) {
            $invalidProperties[] = "'label_ids' can't be null";
        }
        if ($this->container['person_id'] === null) {
            $invalidProperties[] = "'person_id' can't be null";
        }
        if ($this->container['organization_id'] === null) {
            $invalidProperties[] = "'organization_id' can't be null";
        }
        if ($this->container['source_name'] === null) {
            $invalidProperties[] = "'source_name' can't be null";
        }
        if ($this->container['origin'] === null) {
            $invalidProperties[] = "'origin' can't be null";
        }
        if ($this->container['origin_id'] === null) {
            $invalidProperties[] = "'origin_id' can't be null";
        }
        if ($this->container['channel'] === null) {
            $invalidProperties[] = "'channel' can't be null";
        }
        if ($this->container['channel_id'] === null) {
            $invalidProperties[] = "'channel_id' can't be null";
        }
        if ($this->container['is_archived'] === null) {
            $invalidProperties[] = "'is_archived' can't be null";
        }
        if ($this->container['was_seen'] === null) {
            $invalidProperties[] = "'was_seen' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        if ($this->container['expected_close_date'] === null) {
            $invalidProperties[] = "'expected_close_date' can't be null";
        }
        if ($this->container['next_activity_id'] === null) {
            $invalidProperties[] = "'next_activity_id' can't be null";
        }
        if ($this->container['add_time'] === null) {
            $invalidProperties[] = "'add_time' can't be null";
        }
        if ($this->container['update_time'] === null) {
            $invalidProperties[] = "'update_time' can't be null";
        }
        if ($this->container['visible_to'] === null) {
            $invalidProperties[] = "'visible_to' can't be null";
        }
        if ($this->container['cc_email'] === null) {
            $invalidProperties[] = "'cc_email' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique ID of the lead in the UUID format
     *
     * @return self
     */
    public function setId($id): self
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the lead
     *
     * @return self
     */
    public function setTitle($title): self
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return int
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param int $owner_id The ID of the user who owns the lead
     *
     * @return self
     */
    public function setOwnerId($owner_id): self
    {
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets creator_id
     *
     * @return int
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     *
     * @param int $creator_id The ID of the user who created the lead
     *
     * @return self
     */
    public function setCreatorId($creator_id): self
    {
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets label_ids
     *
     * @return string[]
     */
    public function getLabelIds()
    {
        return $this->container['label_ids'];
    }

    /**
     * Sets label_ids
     *
     * @param string[] $label_ids The IDs of the lead labels which are associated with the lead
     *
     * @return self
     */
    public function setLabelIds($label_ids): self
    {
        $this->container['label_ids'] = $label_ids;

        return $this;
    }

    /**
     * Gets person_id
     *
     * @return int
     */
    public function getPersonId()
    {
        return $this->container['person_id'];
    }

    /**
     * Sets person_id
     *
     * @param int $person_id The ID of a person which this lead is linked to
     *
     * @return self
     */
    public function setPersonId($person_id): self
    {
        $this->container['person_id'] = $person_id;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return int
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param int $organization_id The ID of an organization which this lead is linked to
     *
     * @return self
     */
    public function setOrganizationId($organization_id): self
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets source_name
     *
     * @return string
     */
    public function getSourceName()
    {
        return $this->container['source_name'];
    }

    /**
     * Sets source_name
     *
     * @param string $source_name Defines where the lead comes from. Will be `API` if the lead was created through the Public API and will be `Manually created` if the lead was created manually through the UI.
     *
     * @return self
     */
    public function setSourceName($source_name): self
    {
        $this->container['source_name'] = $source_name;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin The way this Lead was created. `origin` field is set by Pipedrive when Lead is created and cannot be changed.
     *
     * @return self
     */
    public function setOrigin($origin): self
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets origin_id
     *
     * @return string
     */
    public function getOriginId()
    {
        return $this->container['origin_id'];
    }

    /**
     * Sets origin_id
     *
     * @param string $origin_id The optional ID to further distinguish the origin of the lead - e.g. Which API integration created this Lead.
     *
     * @return self
     */
    public function setOriginId($origin_id): self
    {
        $this->container['origin_id'] = $origin_id;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return int
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param int $channel The ID of your Marketing channel this Lead was created from. Recognized Marketing channels can be configured in your <a href=\"https://app.pipedrive.com/settings/fields\" target=\"_blank\" rel=\"noopener noreferrer\">Company settings</a>.
     *
     * @return self
     */
    public function setChannel($channel): self
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return string
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param string $channel_id The optional ID to further distinguish the Marketing channel.
     *
     * @return self
     */
    public function setChannelId($channel_id): self
    {
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets is_archived
     *
     * @return bool
     */
    public function getIsArchived()
    {
        return $this->container['is_archived'];
    }

    /**
     * Sets is_archived
     *
     * @param bool $is_archived A flag indicating whether the lead is archived or not
     *
     * @return self
     */
    public function setIsArchived($is_archived): self
    {
        $this->container['is_archived'] = $is_archived;

        return $this;
    }

    /**
     * Gets was_seen
     *
     * @return bool
     */
    public function getWasSeen()
    {
        return $this->container['was_seen'];
    }

    /**
     * Sets was_seen
     *
     * @param bool $was_seen A flag indicating whether the lead was seen by someone in the Pipedrive UI
     *
     * @return self
     */
    public function setWasSeen($was_seen): self
    {
        $this->container['was_seen'] = $was_seen;

        return $this;
    }

    /**
     * Gets value
     *
     * @return \Pipedrive\versions\v1\Model\LeadValue
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param \Pipedrive\versions\v1\Model\LeadValue $value value
     *
     * @return self
     */
    public function setValue($value): self
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets expected_close_date
     *
     * @return \DateTime
     */
    public function getExpectedCloseDate()
    {
        return $this->container['expected_close_date'];
    }

    /**
     * Sets expected_close_date
     *
     * @param \DateTime $expected_close_date The date of when the deal which will be created from the lead is expected to be closed. In ISO 8601 format: YYYY-MM-DD.
     *
     * @return self
     */
    public function setExpectedCloseDate($expected_close_date): self
    {
        $this->container['expected_close_date'] = $expected_close_date;

        return $this;
    }

    /**
     * Gets next_activity_id
     *
     * @return int
     */
    public function getNextActivityId()
    {
        return $this->container['next_activity_id'];
    }

    /**
     * Sets next_activity_id
     *
     * @param int $next_activity_id The ID of the next activity associated with the lead
     *
     * @return self
     */
    public function setNextActivityId($next_activity_id): self
    {
        $this->container['next_activity_id'] = $next_activity_id;

        return $this;
    }

    /**
     * Gets add_time
     *
     * @return \DateTime
     */
    public function getAddTime()
    {
        return $this->container['add_time'];
    }

    /**
     * Sets add_time
     *
     * @param \DateTime $add_time The date and time of when the lead was created. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
     *
     * @return self
     */
    public function setAddTime($add_time): self
    {
        $this->container['add_time'] = $add_time;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return \DateTime
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param \DateTime $update_time The date and time of when the lead was last updated. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
     *
     * @return self
     */
    public function setUpdateTime($update_time): self
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets visible_to
     *
     * @return VisibleTo
     */
    public function getVisibleTo()
    {
        return $this->container['visible_to'];
    }

    /**
     * Sets visible_to
     *
     * @param VisibleTo $visible_to The visibility of the lead. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user.<table><tr><th>Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers (private)</td></tr><tr><td>`3`</td><td>Entire company (shared)</td></tr></table>
     *
     * @return self
     */
    public function setVisibleTo($visible_to): self
    {
        $this->container['visible_to'] = $visible_to;

        return $this;
    }

    /**
     * Gets cc_email
     *
     * @return string
     */
    public function getCcEmail()
    {
        return $this->container['cc_email'];
    }

    /**
     * Sets cc_email
     *
     * @param string $cc_email The BCC email of the lead
     *
     * @return self
     */
    public function setCcEmail($cc_email): self
    {
        $this->container['cc_email'] = $cc_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @throws JsonException
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT | JSON_THROW_ON_ERROR
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @throws JsonException
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}


