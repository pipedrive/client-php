<?php
/**
 * MailThreadParticipant
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Pipedrive\versions\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pipedrive API v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Pipedrive\versions\v1\Model;

use ArrayAccess;
use JsonException;
use JsonSerializable;
use Pipedrive\versions\v1\Traits\RawData;
use Pipedrive\versions\v1\ObjectSerializer;

/**
 * MailThreadParticipant Class Doc Comment
 *
 * @category Class
 * @description Member of a thread
 * @package  Pipedrive\versions\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MailThreadParticipant implements ModelInterface, ArrayAccess, JsonSerializable
{
    use RawData;

    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'MailThreadParticipant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string>
      * @phpsalm-var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'latest_sent' => 'bool',
        'email_address' => 'string',
        'message_time' => 'float',
        'linked_person_id' => 'int',
        'linked_person_name' => 'string',
        'mail_message_party_id' => 'int',
        'linked_organization_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'latest_sent' => null,
        'email_address' => null,
        'message_time' => null,
        'linked_person_id' => null,
        'linked_person_name' => null,
        'mail_message_party_id' => null,
        'linked_organization_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @phpstan-return array<string, string|null>
     * @psalm-return array<string, string|null>
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'latest_sent' => 'latest_sent',
        'email_address' => 'email_address',
        'message_time' => 'message_time',
        'linked_person_id' => 'linked_person_id',
        'linked_person_name' => 'linked_person_name',
        'mail_message_party_id' => 'mail_message_party_id',
        'linked_organization_id' => 'linked_organization_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'latest_sent' => 'setLatestSent',
        'email_address' => 'setEmailAddress',
        'message_time' => 'setMessageTime',
        'linked_person_id' => 'setLinkedPersonId',
        'linked_person_name' => 'setLinkedPersonName',
        'mail_message_party_id' => 'setMailMessagePartyId',
        'linked_organization_id' => 'setLinkedOrganizationId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'latest_sent' => 'getLatestSent',
        'email_address' => 'getEmailAddress',
        'message_time' => 'getMessageTime',
        'linked_person_id' => 'getLinkedPersonId',
        'linked_person_name' => 'getLinkedPersonName',
        'mail_message_party_id' => 'getMailMessagePartyId',
        'linked_organization_id' => 'getLinkedOrganizationId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     * @phpstan-var array<int|string, mixed>
     * @psalm-var array<int|string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @phpstan-param array<string, mixed>|null $data
     * @psalm-param array<string, mixed>|null $data
     * @param array|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['latest_sent'] = $data['latest_sent'] ?? null;
        $this->container['email_address'] = $data['email_address'] ?? null;
        $this->container['message_time'] = $data['message_time'] ?? null;
        $this->container['linked_person_id'] = $data['linked_person_id'] ?? null;
        $this->container['linked_person_name'] = $data['linked_person_name'] ?? null;
        $this->container['mail_message_party_id'] = $data['mail_message_party_id'] ?? null;
        $this->container['linked_organization_id'] = $data['linked_organization_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     * @phpstan-return array<int, string>
     * @psalm-return array<int, string>
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id ID of the mail thread participant
     *
     * @return self
     */
    public function setId($id): self
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the mail thread participant
     *
     * @return self
     */
    public function setName($name): self
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets latest_sent
     *
     * @return bool|null
     */
    public function getLatestSent()
    {
        return $this->container['latest_sent'];
    }

    /**
     * Sets latest_sent
     *
     * @param bool|null $latest_sent Whether the mail thread participant was last to send an email
     *
     * @return self
     */
    public function setLatestSent($latest_sent): self
    {
        $this->container['latest_sent'] = $latest_sent;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string|null $email_address Email address of the mail thread participant
     *
     * @return self
     */
    public function setEmailAddress($email_address): self
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets message_time
     *
     * @return float|null
     */
    public function getMessageTime()
    {
        return $this->container['message_time'];
    }

    /**
     * Sets message_time
     *
     * @param float|null $message_time Message time
     *
     * @return self
     */
    public function setMessageTime($message_time): self
    {
        $this->container['message_time'] = $message_time;

        return $this;
    }

    /**
     * Gets linked_person_id
     *
     * @return int|null
     */
    public function getLinkedPersonId()
    {
        return $this->container['linked_person_id'];
    }

    /**
     * Sets linked_person_id
     *
     * @param int|null $linked_person_id ID of the linked person
     *
     * @return self
     */
    public function setLinkedPersonId($linked_person_id): self
    {
        $this->container['linked_person_id'] = $linked_person_id;

        return $this;
    }

    /**
     * Gets linked_person_name
     *
     * @return string|null
     */
    public function getLinkedPersonName()
    {
        return $this->container['linked_person_name'];
    }

    /**
     * Sets linked_person_name
     *
     * @param string|null $linked_person_name Email of the linked person
     *
     * @return self
     */
    public function setLinkedPersonName($linked_person_name): self
    {
        $this->container['linked_person_name'] = $linked_person_name;

        return $this;
    }

    /**
     * Gets mail_message_party_id
     *
     * @return int|null
     */
    public function getMailMessagePartyId()
    {
        return $this->container['mail_message_party_id'];
    }

    /**
     * Sets mail_message_party_id
     *
     * @param int|null $mail_message_party_id ID of the mail message party
     *
     * @return self
     */
    public function setMailMessagePartyId($mail_message_party_id): self
    {
        $this->container['mail_message_party_id'] = $mail_message_party_id;

        return $this;
    }

    /**
     * Gets linked_organization_id
     *
     * @return int|null
     */
    public function getLinkedOrganizationId()
    {
        return $this->container['linked_organization_id'];
    }

    /**
     * Sets linked_organization_id
     *
     * @param int|null $linked_organization_id Linked Organization ID
     *
     * @return self
     */
    public function setLinkedOrganizationId($linked_organization_id): self
    {
        $this->container['linked_organization_id'] = $linked_organization_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @throws JsonException
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT | JSON_THROW_ON_ERROR
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @throws JsonException
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}


