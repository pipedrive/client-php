<?php
/**
 * PersonItem
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Pipedrive\versions\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pipedrive API v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Pipedrive\versions\v1\Model;

use ArrayAccess;
use JsonException;
use JsonSerializable;
use Pipedrive\versions\v1\Traits\RawData;
use Pipedrive\versions\v1\ObjectSerializer;

/**
 * PersonItem Class Doc Comment
 *
 * @category Class
 * @package  Pipedrive\versions\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PersonItem implements ModelInterface, ArrayAccess, JsonSerializable
{
    use RawData;

    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PersonItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string>
      * @phpsalm-var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'company_id' => 'int',
        'active_flag' => 'bool',
        'phone' => '\Pipedrive\versions\v1\Model\BasePersonItemPhone[]',
        'email' => '\Pipedrive\versions\v1\Model\BasePersonItemEmail[]',
        'first_char' => 'string',
        'add_time' => 'string',
        'update_time' => 'string',
        'visible_to' => 'string',
        'picture_id' => '\Pipedrive\versions\v1\Model\PictureDataWithID',
        'label' => 'int',
        'label_ids' => 'int[]',
        'org_name' => 'string',
        'owner_name' => 'string',
        'cc_email' => 'string',
        'owner_id' => '\Pipedrive\versions\v1\Model\Owner',
        'org_id' => '\Pipedrive\versions\v1\Model\RelationshipOrganizationInfoItemWithActiveFlag',
        'name' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'email_messages_count' => 'int',
        'activities_count' => 'int',
        'done_activities_count' => 'int',
        'undone_activities_count' => 'int',
        'files_count' => 'int',
        'notes_count' => 'int',
        'followers_count' => 'int',
        'last_incoming_mail_time' => 'string',
        'last_outgoing_mail_time' => 'string',
        'open_deals_count' => 'int',
        'related_open_deals_count' => 'int',
        'closed_deals_count' => 'int',
        'related_closed_deals_count' => 'int',
        'won_deals_count' => 'int',
        'related_won_deals_count' => 'int',
        'lost_deals_count' => 'int',
        'related_lost_deals_count' => 'int',
        'next_activity_date' => 'string',
        'next_activity_time' => 'string',
        'next_activity_id' => 'int',
        'last_activity_id' => 'int',
        'last_activity_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'company_id' => null,
        'active_flag' => null,
        'phone' => null,
        'email' => null,
        'first_char' => null,
        'add_time' => null,
        'update_time' => null,
        'visible_to' => null,
        'picture_id' => null,
        'label' => null,
        'label_ids' => null,
        'org_name' => null,
        'owner_name' => null,
        'cc_email' => null,
        'owner_id' => null,
        'org_id' => null,
        'name' => null,
        'first_name' => null,
        'last_name' => null,
        'email_messages_count' => null,
        'activities_count' => null,
        'done_activities_count' => null,
        'undone_activities_count' => null,
        'files_count' => null,
        'notes_count' => null,
        'followers_count' => null,
        'last_incoming_mail_time' => null,
        'last_outgoing_mail_time' => null,
        'open_deals_count' => null,
        'related_open_deals_count' => null,
        'closed_deals_count' => null,
        'related_closed_deals_count' => null,
        'won_deals_count' => null,
        'related_won_deals_count' => null,
        'lost_deals_count' => null,
        'related_lost_deals_count' => null,
        'next_activity_date' => null,
        'next_activity_time' => null,
        'next_activity_id' => null,
        'last_activity_id' => null,
        'last_activity_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @phpstan-return array<string, string|null>
     * @psalm-return array<string, string|null>
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company_id' => 'company_id',
        'active_flag' => 'active_flag',
        'phone' => 'phone',
        'email' => 'email',
        'first_char' => 'first_char',
        'add_time' => 'add_time',
        'update_time' => 'update_time',
        'visible_to' => 'visible_to',
        'picture_id' => 'picture_id',
        'label' => 'label',
        'label_ids' => 'label_ids',
        'org_name' => 'org_name',
        'owner_name' => 'owner_name',
        'cc_email' => 'cc_email',
        'owner_id' => 'owner_id',
        'org_id' => 'org_id',
        'name' => 'name',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'email_messages_count' => 'email_messages_count',
        'activities_count' => 'activities_count',
        'done_activities_count' => 'done_activities_count',
        'undone_activities_count' => 'undone_activities_count',
        'files_count' => 'files_count',
        'notes_count' => 'notes_count',
        'followers_count' => 'followers_count',
        'last_incoming_mail_time' => 'last_incoming_mail_time',
        'last_outgoing_mail_time' => 'last_outgoing_mail_time',
        'open_deals_count' => 'open_deals_count',
        'related_open_deals_count' => 'related_open_deals_count',
        'closed_deals_count' => 'closed_deals_count',
        'related_closed_deals_count' => 'related_closed_deals_count',
        'won_deals_count' => 'won_deals_count',
        'related_won_deals_count' => 'related_won_deals_count',
        'lost_deals_count' => 'lost_deals_count',
        'related_lost_deals_count' => 'related_lost_deals_count',
        'next_activity_date' => 'next_activity_date',
        'next_activity_time' => 'next_activity_time',
        'next_activity_id' => 'next_activity_id',
        'last_activity_id' => 'last_activity_id',
        'last_activity_date' => 'last_activity_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company_id' => 'setCompanyId',
        'active_flag' => 'setActiveFlag',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'first_char' => 'setFirstChar',
        'add_time' => 'setAddTime',
        'update_time' => 'setUpdateTime',
        'visible_to' => 'setVisibleTo',
        'picture_id' => 'setPictureId',
        'label' => 'setLabel',
        'label_ids' => 'setLabelIds',
        'org_name' => 'setOrgName',
        'owner_name' => 'setOwnerName',
        'cc_email' => 'setCcEmail',
        'owner_id' => 'setOwnerId',
        'org_id' => 'setOrgId',
        'name' => 'setName',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email_messages_count' => 'setEmailMessagesCount',
        'activities_count' => 'setActivitiesCount',
        'done_activities_count' => 'setDoneActivitiesCount',
        'undone_activities_count' => 'setUndoneActivitiesCount',
        'files_count' => 'setFilesCount',
        'notes_count' => 'setNotesCount',
        'followers_count' => 'setFollowersCount',
        'last_incoming_mail_time' => 'setLastIncomingMailTime',
        'last_outgoing_mail_time' => 'setLastOutgoingMailTime',
        'open_deals_count' => 'setOpenDealsCount',
        'related_open_deals_count' => 'setRelatedOpenDealsCount',
        'closed_deals_count' => 'setClosedDealsCount',
        'related_closed_deals_count' => 'setRelatedClosedDealsCount',
        'won_deals_count' => 'setWonDealsCount',
        'related_won_deals_count' => 'setRelatedWonDealsCount',
        'lost_deals_count' => 'setLostDealsCount',
        'related_lost_deals_count' => 'setRelatedLostDealsCount',
        'next_activity_date' => 'setNextActivityDate',
        'next_activity_time' => 'setNextActivityTime',
        'next_activity_id' => 'setNextActivityId',
        'last_activity_id' => 'setLastActivityId',
        'last_activity_date' => 'setLastActivityDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company_id' => 'getCompanyId',
        'active_flag' => 'getActiveFlag',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'first_char' => 'getFirstChar',
        'add_time' => 'getAddTime',
        'update_time' => 'getUpdateTime',
        'visible_to' => 'getVisibleTo',
        'picture_id' => 'getPictureId',
        'label' => 'getLabel',
        'label_ids' => 'getLabelIds',
        'org_name' => 'getOrgName',
        'owner_name' => 'getOwnerName',
        'cc_email' => 'getCcEmail',
        'owner_id' => 'getOwnerId',
        'org_id' => 'getOrgId',
        'name' => 'getName',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email_messages_count' => 'getEmailMessagesCount',
        'activities_count' => 'getActivitiesCount',
        'done_activities_count' => 'getDoneActivitiesCount',
        'undone_activities_count' => 'getUndoneActivitiesCount',
        'files_count' => 'getFilesCount',
        'notes_count' => 'getNotesCount',
        'followers_count' => 'getFollowersCount',
        'last_incoming_mail_time' => 'getLastIncomingMailTime',
        'last_outgoing_mail_time' => 'getLastOutgoingMailTime',
        'open_deals_count' => 'getOpenDealsCount',
        'related_open_deals_count' => 'getRelatedOpenDealsCount',
        'closed_deals_count' => 'getClosedDealsCount',
        'related_closed_deals_count' => 'getRelatedClosedDealsCount',
        'won_deals_count' => 'getWonDealsCount',
        'related_won_deals_count' => 'getRelatedWonDealsCount',
        'lost_deals_count' => 'getLostDealsCount',
        'related_lost_deals_count' => 'getRelatedLostDealsCount',
        'next_activity_date' => 'getNextActivityDate',
        'next_activity_time' => 'getNextActivityTime',
        'next_activity_id' => 'getNextActivityId',
        'last_activity_id' => 'getLastActivityId',
        'last_activity_date' => 'getLastActivityDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     * @phpstan-var array<int|string, mixed>
     * @psalm-var array<int|string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @phpstan-param array<string, mixed>|null $data
     * @psalm-param array<string, mixed>|null $data
     * @param array|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['company_id'] = $data['company_id'] ?? null;
        $this->container['active_flag'] = $data['active_flag'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['first_char'] = $data['first_char'] ?? null;
        $this->container['add_time'] = $data['add_time'] ?? null;
        $this->container['update_time'] = $data['update_time'] ?? null;
        $this->container['visible_to'] = $data['visible_to'] ?? null;
        $this->container['picture_id'] = $data['picture_id'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['label_ids'] = $data['label_ids'] ?? null;
        $this->container['org_name'] = $data['org_name'] ?? null;
        $this->container['owner_name'] = $data['owner_name'] ?? null;
        $this->container['cc_email'] = $data['cc_email'] ?? null;
        $this->container['owner_id'] = $data['owner_id'] ?? null;
        $this->container['org_id'] = $data['org_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['email_messages_count'] = $data['email_messages_count'] ?? null;
        $this->container['activities_count'] = $data['activities_count'] ?? null;
        $this->container['done_activities_count'] = $data['done_activities_count'] ?? null;
        $this->container['undone_activities_count'] = $data['undone_activities_count'] ?? null;
        $this->container['files_count'] = $data['files_count'] ?? null;
        $this->container['notes_count'] = $data['notes_count'] ?? null;
        $this->container['followers_count'] = $data['followers_count'] ?? null;
        $this->container['last_incoming_mail_time'] = $data['last_incoming_mail_time'] ?? null;
        $this->container['last_outgoing_mail_time'] = $data['last_outgoing_mail_time'] ?? null;
        $this->container['open_deals_count'] = $data['open_deals_count'] ?? null;
        $this->container['related_open_deals_count'] = $data['related_open_deals_count'] ?? null;
        $this->container['closed_deals_count'] = $data['closed_deals_count'] ?? null;
        $this->container['related_closed_deals_count'] = $data['related_closed_deals_count'] ?? null;
        $this->container['won_deals_count'] = $data['won_deals_count'] ?? null;
        $this->container['related_won_deals_count'] = $data['related_won_deals_count'] ?? null;
        $this->container['lost_deals_count'] = $data['lost_deals_count'] ?? null;
        $this->container['related_lost_deals_count'] = $data['related_lost_deals_count'] ?? null;
        $this->container['next_activity_date'] = $data['next_activity_date'] ?? null;
        $this->container['next_activity_time'] = $data['next_activity_time'] ?? null;
        $this->container['next_activity_id'] = $data['next_activity_id'] ?? null;
        $this->container['last_activity_id'] = $data['last_activity_id'] ?? null;
        $this->container['last_activity_date'] = $data['last_activity_date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     * @phpstan-return array<int, string>
     * @psalm-return array<int, string>
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the person
     *
     * @return self
     */
    public function setId($id): self
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int|null $company_id The ID of the company related to the person
     *
     * @return self
     */
    public function setCompanyId($company_id): self
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets active_flag
     *
     * @return bool|null
     */
    public function getActiveFlag()
    {
        return $this->container['active_flag'];
    }

    /**
     * Sets active_flag
     *
     * @param bool|null $active_flag Whether the person is active or not
     *
     * @return self
     */
    public function setActiveFlag($active_flag): self
    {
        $this->container['active_flag'] = $active_flag;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \Pipedrive\versions\v1\Model\BasePersonItemPhone[]|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \Pipedrive\versions\v1\Model\BasePersonItemPhone[]|null $phone A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ \"value\": \"12345\", \"primary\": \"true\", \"label\": \"mobile\" }]`. Please note that only `value` is required.
     *
     * @return self
     */
    public function setPhone($phone): self
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return \Pipedrive\versions\v1\Model\BasePersonItemEmail[]|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param \Pipedrive\versions\v1\Model\BasePersonItemEmail[]|null $email An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ \"value\": \"mail@example.com\", \"primary\": \"true\", \"label\": \"main\" } ]`. Please note that only `value` is required.
     *
     * @return self
     */
    public function setEmail($email): self
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_char
     *
     * @return string|null
     */
    public function getFirstChar()
    {
        return $this->container['first_char'];
    }

    /**
     * Sets first_char
     *
     * @param string|null $first_char The first letter of the name of the person
     *
     * @return self
     */
    public function setFirstChar($first_char): self
    {
        $this->container['first_char'] = $first_char;

        return $this;
    }

    /**
     * Gets add_time
     *
     * @return string|null
     */
    public function getAddTime()
    {
        return $this->container['add_time'];
    }

    /**
     * Sets add_time
     *
     * @param string|null $add_time The date and time when the person was added/created. Format: YYYY-MM-DD HH:MM:SS
     *
     * @return self
     */
    public function setAddTime($add_time): self
    {
        $this->container['add_time'] = $add_time;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string|null
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string|null $update_time The last updated date and time of the person. Format: YYYY-MM-DD HH:MM:SS
     *
     * @return self
     */
    public function setUpdateTime($update_time): self
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets visible_to
     *
     * @return string|null
     */
    public function getVisibleTo()
    {
        return $this->container['visible_to'];
    }

    /**
     * Sets visible_to
     *
     * @param string|null $visible_to The visibility group ID of who can see the person
     *
     * @return self
     */
    public function setVisibleTo($visible_to): self
    {
        $this->container['visible_to'] = $visible_to;

        return $this;
    }

    /**
     * Gets picture_id
     *
     * @return \Pipedrive\versions\v1\Model\PictureDataWithID|null
     */
    public function getPictureId()
    {
        return $this->container['picture_id'];
    }

    /**
     * Sets picture_id
     *
     * @param \Pipedrive\versions\v1\Model\PictureDataWithID|null $picture_id picture_id
     *
     * @return self
     */
    public function setPictureId($picture_id): self
    {
        $this->container['picture_id'] = $picture_id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return int|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param int|null $label The label assigned to the person. When the `label` field is updated, the `label_ids` field value will be overwritten by the `label` field value.
     *
     * @return self
     */
    public function setLabel($label): self
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets label_ids
     *
     * @return int[]|null
     */
    public function getLabelIds()
    {
        return $this->container['label_ids'];
    }

    /**
     * Sets label_ids
     *
     * @param int[]|null $label_ids The IDs of labels assigned to the person. When the `label_ids` field is updated, the `label` field value will be set to the first value of the `label_ids` field.
     *
     * @return self
     */
    public function setLabelIds($label_ids): self
    {
        $this->container['label_ids'] = $label_ids;

        return $this;
    }

    /**
     * Gets org_name
     *
     * @return string|null
     */
    public function getOrgName()
    {
        return $this->container['org_name'];
    }

    /**
     * Sets org_name
     *
     * @param string|null $org_name The name of the organization associated with the person
     *
     * @return self
     */
    public function setOrgName($org_name): self
    {
        $this->container['org_name'] = $org_name;

        return $this;
    }

    /**
     * Gets owner_name
     *
     * @return string|null
     */
    public function getOwnerName()
    {
        return $this->container['owner_name'];
    }

    /**
     * Sets owner_name
     *
     * @param string|null $owner_name The name of the owner associated with the person
     *
     * @return self
     */
    public function setOwnerName($owner_name): self
    {
        $this->container['owner_name'] = $owner_name;

        return $this;
    }

    /**
     * Gets cc_email
     *
     * @return string|null
     */
    public function getCcEmail()
    {
        return $this->container['cc_email'];
    }

    /**
     * Sets cc_email
     *
     * @param string|null $cc_email The BCC email associated with the person
     *
     * @return self
     */
    public function setCcEmail($cc_email): self
    {
        $this->container['cc_email'] = $cc_email;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return \Pipedrive\versions\v1\Model\Owner|null
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param \Pipedrive\versions\v1\Model\Owner|null $owner_id owner_id
     *
     * @return self
     */
    public function setOwnerId($owner_id): self
    {
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets org_id
     *
     * @return \Pipedrive\versions\v1\Model\RelationshipOrganizationInfoItemWithActiveFlag|null
     */
    public function getOrgId()
    {
        return $this->container['org_id'];
    }

    /**
     * Sets org_id
     *
     * @param \Pipedrive\versions\v1\Model\RelationshipOrganizationInfoItemWithActiveFlag|null $org_id org_id
     *
     * @return self
     */
    public function setOrgId($org_id): self
    {
        $this->container['org_id'] = $org_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the person
     *
     * @return self
     */
    public function setName($name): self
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The first name of the person
     *
     * @return self
     */
    public function setFirstName($first_name): self
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The last name of the person
     *
     * @return self
     */
    public function setLastName($last_name): self
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email_messages_count
     *
     * @return int|null
     */
    public function getEmailMessagesCount()
    {
        return $this->container['email_messages_count'];
    }

    /**
     * Sets email_messages_count
     *
     * @param int|null $email_messages_count The count of email messages related to the person
     *
     * @return self
     */
    public function setEmailMessagesCount($email_messages_count): self
    {
        $this->container['email_messages_count'] = $email_messages_count;

        return $this;
    }

    /**
     * Gets activities_count
     *
     * @return int|null
     */
    public function getActivitiesCount()
    {
        return $this->container['activities_count'];
    }

    /**
     * Sets activities_count
     *
     * @param int|null $activities_count The count of activities related to the person
     *
     * @return self
     */
    public function setActivitiesCount($activities_count): self
    {
        $this->container['activities_count'] = $activities_count;

        return $this;
    }

    /**
     * Gets done_activities_count
     *
     * @return int|null
     */
    public function getDoneActivitiesCount()
    {
        return $this->container['done_activities_count'];
    }

    /**
     * Sets done_activities_count
     *
     * @param int|null $done_activities_count The count of done activities related to the person
     *
     * @return self
     */
    public function setDoneActivitiesCount($done_activities_count): self
    {
        $this->container['done_activities_count'] = $done_activities_count;

        return $this;
    }

    /**
     * Gets undone_activities_count
     *
     * @return int|null
     */
    public function getUndoneActivitiesCount()
    {
        return $this->container['undone_activities_count'];
    }

    /**
     * Sets undone_activities_count
     *
     * @param int|null $undone_activities_count The count of undone activities related to the person
     *
     * @return self
     */
    public function setUndoneActivitiesCount($undone_activities_count): self
    {
        $this->container['undone_activities_count'] = $undone_activities_count;

        return $this;
    }

    /**
     * Gets files_count
     *
     * @return int|null
     */
    public function getFilesCount()
    {
        return $this->container['files_count'];
    }

    /**
     * Sets files_count
     *
     * @param int|null $files_count The count of files related to the person
     *
     * @return self
     */
    public function setFilesCount($files_count): self
    {
        $this->container['files_count'] = $files_count;

        return $this;
    }

    /**
     * Gets notes_count
     *
     * @return int|null
     */
    public function getNotesCount()
    {
        return $this->container['notes_count'];
    }

    /**
     * Sets notes_count
     *
     * @param int|null $notes_count The count of notes related to the person
     *
     * @return self
     */
    public function setNotesCount($notes_count): self
    {
        $this->container['notes_count'] = $notes_count;

        return $this;
    }

    /**
     * Gets followers_count
     *
     * @return int|null
     */
    public function getFollowersCount()
    {
        return $this->container['followers_count'];
    }

    /**
     * Sets followers_count
     *
     * @param int|null $followers_count The count of followers related to the person
     *
     * @return self
     */
    public function setFollowersCount($followers_count): self
    {
        $this->container['followers_count'] = $followers_count;

        return $this;
    }

    /**
     * Gets last_incoming_mail_time
     *
     * @return string|null
     */
    public function getLastIncomingMailTime()
    {
        return $this->container['last_incoming_mail_time'];
    }

    /**
     * Sets last_incoming_mail_time
     *
     * @param string|null $last_incoming_mail_time The date and time of the last incoming email associated with the person
     *
     * @return self
     */
    public function setLastIncomingMailTime($last_incoming_mail_time): self
    {
        $this->container['last_incoming_mail_time'] = $last_incoming_mail_time;

        return $this;
    }

    /**
     * Gets last_outgoing_mail_time
     *
     * @return string|null
     */
    public function getLastOutgoingMailTime()
    {
        return $this->container['last_outgoing_mail_time'];
    }

    /**
     * Sets last_outgoing_mail_time
     *
     * @param string|null $last_outgoing_mail_time The date and time of the last outgoing email associated with the person
     *
     * @return self
     */
    public function setLastOutgoingMailTime($last_outgoing_mail_time): self
    {
        $this->container['last_outgoing_mail_time'] = $last_outgoing_mail_time;

        return $this;
    }

    /**
     * Gets open_deals_count
     *
     * @return int|null
     */
    public function getOpenDealsCount()
    {
        return $this->container['open_deals_count'];
    }

    /**
     * Sets open_deals_count
     *
     * @param int|null $open_deals_count The count of open deals related with the item
     *
     * @return self
     */
    public function setOpenDealsCount($open_deals_count): self
    {
        $this->container['open_deals_count'] = $open_deals_count;

        return $this;
    }

    /**
     * Gets related_open_deals_count
     *
     * @return int|null
     */
    public function getRelatedOpenDealsCount()
    {
        return $this->container['related_open_deals_count'];
    }

    /**
     * Sets related_open_deals_count
     *
     * @param int|null $related_open_deals_count The count of related open deals related with the item
     *
     * @return self
     */
    public function setRelatedOpenDealsCount($related_open_deals_count): self
    {
        $this->container['related_open_deals_count'] = $related_open_deals_count;

        return $this;
    }

    /**
     * Gets closed_deals_count
     *
     * @return int|null
     */
    public function getClosedDealsCount()
    {
        return $this->container['closed_deals_count'];
    }

    /**
     * Sets closed_deals_count
     *
     * @param int|null $closed_deals_count The count of closed deals related with the item
     *
     * @return self
     */
    public function setClosedDealsCount($closed_deals_count): self
    {
        $this->container['closed_deals_count'] = $closed_deals_count;

        return $this;
    }

    /**
     * Gets related_closed_deals_count
     *
     * @return int|null
     */
    public function getRelatedClosedDealsCount()
    {
        return $this->container['related_closed_deals_count'];
    }

    /**
     * Sets related_closed_deals_count
     *
     * @param int|null $related_closed_deals_count The count of related closed deals related with the item
     *
     * @return self
     */
    public function setRelatedClosedDealsCount($related_closed_deals_count): self
    {
        $this->container['related_closed_deals_count'] = $related_closed_deals_count;

        return $this;
    }

    /**
     * Gets won_deals_count
     *
     * @return int|null
     */
    public function getWonDealsCount()
    {
        return $this->container['won_deals_count'];
    }

    /**
     * Sets won_deals_count
     *
     * @param int|null $won_deals_count The count of won deals related with the item
     *
     * @return self
     */
    public function setWonDealsCount($won_deals_count): self
    {
        $this->container['won_deals_count'] = $won_deals_count;

        return $this;
    }

    /**
     * Gets related_won_deals_count
     *
     * @return int|null
     */
    public function getRelatedWonDealsCount()
    {
        return $this->container['related_won_deals_count'];
    }

    /**
     * Sets related_won_deals_count
     *
     * @param int|null $related_won_deals_count The count of related won deals related with the item
     *
     * @return self
     */
    public function setRelatedWonDealsCount($related_won_deals_count): self
    {
        $this->container['related_won_deals_count'] = $related_won_deals_count;

        return $this;
    }

    /**
     * Gets lost_deals_count
     *
     * @return int|null
     */
    public function getLostDealsCount()
    {
        return $this->container['lost_deals_count'];
    }

    /**
     * Sets lost_deals_count
     *
     * @param int|null $lost_deals_count The count of lost deals related with the item
     *
     * @return self
     */
    public function setLostDealsCount($lost_deals_count): self
    {
        $this->container['lost_deals_count'] = $lost_deals_count;

        return $this;
    }

    /**
     * Gets related_lost_deals_count
     *
     * @return int|null
     */
    public function getRelatedLostDealsCount()
    {
        return $this->container['related_lost_deals_count'];
    }

    /**
     * Sets related_lost_deals_count
     *
     * @param int|null $related_lost_deals_count The count of related lost deals related with the item
     *
     * @return self
     */
    public function setRelatedLostDealsCount($related_lost_deals_count): self
    {
        $this->container['related_lost_deals_count'] = $related_lost_deals_count;

        return $this;
    }

    /**
     * Gets next_activity_date
     *
     * @return string|null
     */
    public function getNextActivityDate()
    {
        return $this->container['next_activity_date'];
    }

    /**
     * Sets next_activity_date
     *
     * @param string|null $next_activity_date The date of the next activity associated with the deal
     *
     * @return self
     */
    public function setNextActivityDate($next_activity_date): self
    {
        $this->container['next_activity_date'] = $next_activity_date;

        return $this;
    }

    /**
     * Gets next_activity_time
     *
     * @return string|null
     */
    public function getNextActivityTime()
    {
        return $this->container['next_activity_time'];
    }

    /**
     * Sets next_activity_time
     *
     * @param string|null $next_activity_time The time of the next activity associated with the deal
     *
     * @return self
     */
    public function setNextActivityTime($next_activity_time): self
    {
        $this->container['next_activity_time'] = $next_activity_time;

        return $this;
    }

    /**
     * Gets next_activity_id
     *
     * @return int|null
     */
    public function getNextActivityId()
    {
        return $this->container['next_activity_id'];
    }

    /**
     * Sets next_activity_id
     *
     * @param int|null $next_activity_id The ID of the next activity associated with the deal
     *
     * @return self
     */
    public function setNextActivityId($next_activity_id): self
    {
        $this->container['next_activity_id'] = $next_activity_id;

        return $this;
    }

    /**
     * Gets last_activity_id
     *
     * @return int|null
     */
    public function getLastActivityId()
    {
        return $this->container['last_activity_id'];
    }

    /**
     * Sets last_activity_id
     *
     * @param int|null $last_activity_id The ID of the last activity associated with the deal
     *
     * @return self
     */
    public function setLastActivityId($last_activity_id): self
    {
        $this->container['last_activity_id'] = $last_activity_id;

        return $this;
    }

    /**
     * Gets last_activity_date
     *
     * @return string|null
     */
    public function getLastActivityDate()
    {
        return $this->container['last_activity_date'];
    }

    /**
     * Sets last_activity_date
     *
     * @param string|null $last_activity_date The date of the last activity associated with the deal
     *
     * @return self
     */
    public function setLastActivityDate($last_activity_date): self
    {
        $this->container['last_activity_date'] = $last_activity_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @throws JsonException
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT | JSON_THROW_ON_ERROR
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @throws JsonException
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}


