<?php
/**
 * ActivityResponseObject
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Pipedrive\versions\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pipedrive API v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Pipedrive\versions\v1\Model;

use ArrayAccess;
use JsonException;
use JsonSerializable;
use Pipedrive\versions\v1\Traits\RawData;
use Pipedrive\versions\v1\ObjectSerializer;

/**
 * ActivityResponseObject Class Doc Comment
 *
 * @category Class
 * @package  Pipedrive\versions\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ActivityResponseObject implements ModelInterface, ArrayAccess, JsonSerializable
{
    use RawData;

    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ActivityResponseObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string>
      * @phpsalm-var array<string, string>
      */
    protected static array $openAPITypes = [
        'due_date' => '\DateTime',
        'due_time' => 'string',
        'duration' => 'string',
        'deal_id' => 'int',
        'lead_id' => 'string',
        'person_id' => 'int',
        'project_id' => 'int',
        'org_id' => 'int',
        'location' => 'string',
        'public_description' => 'string',
        'id' => 'int',
        'note' => 'string',
        'done' => 'bool',
        'subject' => 'string',
        'type' => 'string',
        'user_id' => 'int',
        'participants' => 'object[]',
        'busy_flag' => 'bool',
        'attendees' => 'object[]',
        'company_id' => 'int',
        'reference_type' => 'string',
        'reference_id' => 'int',
        'conference_meeting_client' => 'string',
        'conference_meeting_url' => 'string',
        'conference_meeting_id' => 'string',
        'add_time' => 'string',
        'marked_as_done_time' => 'string',
        'last_notification_time' => 'string',
        'last_notification_user_id' => 'int',
        'notification_language_id' => 'int',
        'active_flag' => 'bool',
        'update_time' => 'string',
        'update_user_id' => 'int',
        'gcal_event_id' => 'string',
        'google_calendar_id' => 'string',
        'google_calendar_etag' => 'string',
        'calendar_sync_include_context' => 'string',
        'source_timezone' => 'string',
        'rec_rule' => 'string',
        'rec_rule_extension' => 'string',
        'rec_master_activity_id' => 'int',
        'series' => 'object[]',
        'created_by_user_id' => 'int',
        'location_subpremise' => 'string',
        'location_street_number' => 'string',
        'location_route' => 'string',
        'location_sublocality' => 'string',
        'location_locality' => 'string',
        'location_admin_area_level_1' => 'string',
        'location_admin_area_level_2' => 'string',
        'location_country' => 'string',
        'location_postal_code' => 'string',
        'location_formatted_address' => 'string',
        'org_name' => 'string',
        'person_name' => 'string',
        'deal_title' => 'string',
        'owner_name' => 'string',
        'person_dropbox_bcc' => 'string',
        'deal_dropbox_bcc' => 'string',
        'assigned_to_user_id' => 'int',
        'file' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'due_date' => 'date',
        'due_time' => null,
        'duration' => null,
        'deal_id' => null,
        'lead_id' => 'uuid',
        'person_id' => null,
        'project_id' => null,
        'org_id' => null,
        'location' => null,
        'public_description' => null,
        'id' => null,
        'note' => null,
        'done' => null,
        'subject' => null,
        'type' => null,
        'user_id' => null,
        'participants' => null,
        'busy_flag' => null,
        'attendees' => null,
        'company_id' => null,
        'reference_type' => null,
        'reference_id' => null,
        'conference_meeting_client' => null,
        'conference_meeting_url' => null,
        'conference_meeting_id' => null,
        'add_time' => null,
        'marked_as_done_time' => null,
        'last_notification_time' => null,
        'last_notification_user_id' => null,
        'notification_language_id' => null,
        'active_flag' => null,
        'update_time' => null,
        'update_user_id' => null,
        'gcal_event_id' => null,
        'google_calendar_id' => null,
        'google_calendar_etag' => null,
        'calendar_sync_include_context' => null,
        'source_timezone' => null,
        'rec_rule' => null,
        'rec_rule_extension' => null,
        'rec_master_activity_id' => null,
        'series' => null,
        'created_by_user_id' => null,
        'location_subpremise' => null,
        'location_street_number' => null,
        'location_route' => null,
        'location_sublocality' => null,
        'location_locality' => null,
        'location_admin_area_level_1' => null,
        'location_admin_area_level_2' => null,
        'location_country' => null,
        'location_postal_code' => null,
        'location_formatted_address' => null,
        'org_name' => null,
        'person_name' => null,
        'deal_title' => null,
        'owner_name' => null,
        'person_dropbox_bcc' => null,
        'deal_dropbox_bcc' => null,
        'assigned_to_user_id' => null,
        'file' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @phpstan-return array<string, string|null>
     * @psalm-return array<string, string|null>
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'due_date' => 'due_date',
        'due_time' => 'due_time',
        'duration' => 'duration',
        'deal_id' => 'deal_id',
        'lead_id' => 'lead_id',
        'person_id' => 'person_id',
        'project_id' => 'project_id',
        'org_id' => 'org_id',
        'location' => 'location',
        'public_description' => 'public_description',
        'id' => 'id',
        'note' => 'note',
        'done' => 'done',
        'subject' => 'subject',
        'type' => 'type',
        'user_id' => 'user_id',
        'participants' => 'participants',
        'busy_flag' => 'busy_flag',
        'attendees' => 'attendees',
        'company_id' => 'company_id',
        'reference_type' => 'reference_type',
        'reference_id' => 'reference_id',
        'conference_meeting_client' => 'conference_meeting_client',
        'conference_meeting_url' => 'conference_meeting_url',
        'conference_meeting_id' => 'conference_meeting_id',
        'add_time' => 'add_time',
        'marked_as_done_time' => 'marked_as_done_time',
        'last_notification_time' => 'last_notification_time',
        'last_notification_user_id' => 'last_notification_user_id',
        'notification_language_id' => 'notification_language_id',
        'active_flag' => 'active_flag',
        'update_time' => 'update_time',
        'update_user_id' => 'update_user_id',
        'gcal_event_id' => 'gcal_event_id',
        'google_calendar_id' => 'google_calendar_id',
        'google_calendar_etag' => 'google_calendar_etag',
        'calendar_sync_include_context' => 'calendar_sync_include_context',
        'source_timezone' => 'source_timezone',
        'rec_rule' => 'rec_rule',
        'rec_rule_extension' => 'rec_rule_extension',
        'rec_master_activity_id' => 'rec_master_activity_id',
        'series' => 'series',
        'created_by_user_id' => 'created_by_user_id',
        'location_subpremise' => 'location_subpremise',
        'location_street_number' => 'location_street_number',
        'location_route' => 'location_route',
        'location_sublocality' => 'location_sublocality',
        'location_locality' => 'location_locality',
        'location_admin_area_level_1' => 'location_admin_area_level_1',
        'location_admin_area_level_2' => 'location_admin_area_level_2',
        'location_country' => 'location_country',
        'location_postal_code' => 'location_postal_code',
        'location_formatted_address' => 'location_formatted_address',
        'org_name' => 'org_name',
        'person_name' => 'person_name',
        'deal_title' => 'deal_title',
        'owner_name' => 'owner_name',
        'person_dropbox_bcc' => 'person_dropbox_bcc',
        'deal_dropbox_bcc' => 'deal_dropbox_bcc',
        'assigned_to_user_id' => 'assigned_to_user_id',
        'file' => 'file'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'due_date' => 'setDueDate',
        'due_time' => 'setDueTime',
        'duration' => 'setDuration',
        'deal_id' => 'setDealId',
        'lead_id' => 'setLeadId',
        'person_id' => 'setPersonId',
        'project_id' => 'setProjectId',
        'org_id' => 'setOrgId',
        'location' => 'setLocation',
        'public_description' => 'setPublicDescription',
        'id' => 'setId',
        'note' => 'setNote',
        'done' => 'setDone',
        'subject' => 'setSubject',
        'type' => 'setType',
        'user_id' => 'setUserId',
        'participants' => 'setParticipants',
        'busy_flag' => 'setBusyFlag',
        'attendees' => 'setAttendees',
        'company_id' => 'setCompanyId',
        'reference_type' => 'setReferenceType',
        'reference_id' => 'setReferenceId',
        'conference_meeting_client' => 'setConferenceMeetingClient',
        'conference_meeting_url' => 'setConferenceMeetingUrl',
        'conference_meeting_id' => 'setConferenceMeetingId',
        'add_time' => 'setAddTime',
        'marked_as_done_time' => 'setMarkedAsDoneTime',
        'last_notification_time' => 'setLastNotificationTime',
        'last_notification_user_id' => 'setLastNotificationUserId',
        'notification_language_id' => 'setNotificationLanguageId',
        'active_flag' => 'setActiveFlag',
        'update_time' => 'setUpdateTime',
        'update_user_id' => 'setUpdateUserId',
        'gcal_event_id' => 'setGcalEventId',
        'google_calendar_id' => 'setGoogleCalendarId',
        'google_calendar_etag' => 'setGoogleCalendarEtag',
        'calendar_sync_include_context' => 'setCalendarSyncIncludeContext',
        'source_timezone' => 'setSourceTimezone',
        'rec_rule' => 'setRecRule',
        'rec_rule_extension' => 'setRecRuleExtension',
        'rec_master_activity_id' => 'setRecMasterActivityId',
        'series' => 'setSeries',
        'created_by_user_id' => 'setCreatedByUserId',
        'location_subpremise' => 'setLocationSubpremise',
        'location_street_number' => 'setLocationStreetNumber',
        'location_route' => 'setLocationRoute',
        'location_sublocality' => 'setLocationSublocality',
        'location_locality' => 'setLocationLocality',
        'location_admin_area_level_1' => 'setLocationAdminAreaLevel1',
        'location_admin_area_level_2' => 'setLocationAdminAreaLevel2',
        'location_country' => 'setLocationCountry',
        'location_postal_code' => 'setLocationPostalCode',
        'location_formatted_address' => 'setLocationFormattedAddress',
        'org_name' => 'setOrgName',
        'person_name' => 'setPersonName',
        'deal_title' => 'setDealTitle',
        'owner_name' => 'setOwnerName',
        'person_dropbox_bcc' => 'setPersonDropboxBcc',
        'deal_dropbox_bcc' => 'setDealDropboxBcc',
        'assigned_to_user_id' => 'setAssignedToUserId',
        'file' => 'setFile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'due_date' => 'getDueDate',
        'due_time' => 'getDueTime',
        'duration' => 'getDuration',
        'deal_id' => 'getDealId',
        'lead_id' => 'getLeadId',
        'person_id' => 'getPersonId',
        'project_id' => 'getProjectId',
        'org_id' => 'getOrgId',
        'location' => 'getLocation',
        'public_description' => 'getPublicDescription',
        'id' => 'getId',
        'note' => 'getNote',
        'done' => 'getDone',
        'subject' => 'getSubject',
        'type' => 'getType',
        'user_id' => 'getUserId',
        'participants' => 'getParticipants',
        'busy_flag' => 'getBusyFlag',
        'attendees' => 'getAttendees',
        'company_id' => 'getCompanyId',
        'reference_type' => 'getReferenceType',
        'reference_id' => 'getReferenceId',
        'conference_meeting_client' => 'getConferenceMeetingClient',
        'conference_meeting_url' => 'getConferenceMeetingUrl',
        'conference_meeting_id' => 'getConferenceMeetingId',
        'add_time' => 'getAddTime',
        'marked_as_done_time' => 'getMarkedAsDoneTime',
        'last_notification_time' => 'getLastNotificationTime',
        'last_notification_user_id' => 'getLastNotificationUserId',
        'notification_language_id' => 'getNotificationLanguageId',
        'active_flag' => 'getActiveFlag',
        'update_time' => 'getUpdateTime',
        'update_user_id' => 'getUpdateUserId',
        'gcal_event_id' => 'getGcalEventId',
        'google_calendar_id' => 'getGoogleCalendarId',
        'google_calendar_etag' => 'getGoogleCalendarEtag',
        'calendar_sync_include_context' => 'getCalendarSyncIncludeContext',
        'source_timezone' => 'getSourceTimezone',
        'rec_rule' => 'getRecRule',
        'rec_rule_extension' => 'getRecRuleExtension',
        'rec_master_activity_id' => 'getRecMasterActivityId',
        'series' => 'getSeries',
        'created_by_user_id' => 'getCreatedByUserId',
        'location_subpremise' => 'getLocationSubpremise',
        'location_street_number' => 'getLocationStreetNumber',
        'location_route' => 'getLocationRoute',
        'location_sublocality' => 'getLocationSublocality',
        'location_locality' => 'getLocationLocality',
        'location_admin_area_level_1' => 'getLocationAdminAreaLevel1',
        'location_admin_area_level_2' => 'getLocationAdminAreaLevel2',
        'location_country' => 'getLocationCountry',
        'location_postal_code' => 'getLocationPostalCode',
        'location_formatted_address' => 'getLocationFormattedAddress',
        'org_name' => 'getOrgName',
        'person_name' => 'getPersonName',
        'deal_title' => 'getDealTitle',
        'owner_name' => 'getOwnerName',
        'person_dropbox_bcc' => 'getPersonDropboxBcc',
        'deal_dropbox_bcc' => 'getDealDropboxBcc',
        'assigned_to_user_id' => 'getAssignedToUserId',
        'file' => 'getFile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     * @phpstan-var array<int|string, mixed>
     * @psalm-var array<int|string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @phpstan-param array<string, mixed>|null $data
     * @psalm-param array<string, mixed>|null $data
     * @param array|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['due_date'] = $data['due_date'] ?? null;
        $this->container['due_time'] = $data['due_time'] ?? null;
        $this->container['duration'] = $data['duration'] ?? null;
        $this->container['deal_id'] = $data['deal_id'] ?? null;
        $this->container['lead_id'] = $data['lead_id'] ?? null;
        $this->container['person_id'] = $data['person_id'] ?? null;
        $this->container['project_id'] = $data['project_id'] ?? null;
        $this->container['org_id'] = $data['org_id'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['public_description'] = $data['public_description'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['note'] = $data['note'] ?? null;
        $this->container['done'] = $data['done'] ?? null;
        $this->container['subject'] = $data['subject'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['participants'] = $data['participants'] ?? null;
        $this->container['busy_flag'] = $data['busy_flag'] ?? null;
        $this->container['attendees'] = $data['attendees'] ?? null;
        $this->container['company_id'] = $data['company_id'] ?? null;
        $this->container['reference_type'] = $data['reference_type'] ?? null;
        $this->container['reference_id'] = $data['reference_id'] ?? null;
        $this->container['conference_meeting_client'] = $data['conference_meeting_client'] ?? null;
        $this->container['conference_meeting_url'] = $data['conference_meeting_url'] ?? null;
        $this->container['conference_meeting_id'] = $data['conference_meeting_id'] ?? null;
        $this->container['add_time'] = $data['add_time'] ?? null;
        $this->container['marked_as_done_time'] = $data['marked_as_done_time'] ?? null;
        $this->container['last_notification_time'] = $data['last_notification_time'] ?? null;
        $this->container['last_notification_user_id'] = $data['last_notification_user_id'] ?? null;
        $this->container['notification_language_id'] = $data['notification_language_id'] ?? null;
        $this->container['active_flag'] = $data['active_flag'] ?? null;
        $this->container['update_time'] = $data['update_time'] ?? null;
        $this->container['update_user_id'] = $data['update_user_id'] ?? null;
        $this->container['gcal_event_id'] = $data['gcal_event_id'] ?? null;
        $this->container['google_calendar_id'] = $data['google_calendar_id'] ?? null;
        $this->container['google_calendar_etag'] = $data['google_calendar_etag'] ?? null;
        $this->container['calendar_sync_include_context'] = $data['calendar_sync_include_context'] ?? null;
        $this->container['source_timezone'] = $data['source_timezone'] ?? null;
        $this->container['rec_rule'] = $data['rec_rule'] ?? null;
        $this->container['rec_rule_extension'] = $data['rec_rule_extension'] ?? null;
        $this->container['rec_master_activity_id'] = $data['rec_master_activity_id'] ?? null;
        $this->container['series'] = $data['series'] ?? null;
        $this->container['created_by_user_id'] = $data['created_by_user_id'] ?? null;
        $this->container['location_subpremise'] = $data['location_subpremise'] ?? null;
        $this->container['location_street_number'] = $data['location_street_number'] ?? null;
        $this->container['location_route'] = $data['location_route'] ?? null;
        $this->container['location_sublocality'] = $data['location_sublocality'] ?? null;
        $this->container['location_locality'] = $data['location_locality'] ?? null;
        $this->container['location_admin_area_level_1'] = $data['location_admin_area_level_1'] ?? null;
        $this->container['location_admin_area_level_2'] = $data['location_admin_area_level_2'] ?? null;
        $this->container['location_country'] = $data['location_country'] ?? null;
        $this->container['location_postal_code'] = $data['location_postal_code'] ?? null;
        $this->container['location_formatted_address'] = $data['location_formatted_address'] ?? null;
        $this->container['org_name'] = $data['org_name'] ?? null;
        $this->container['person_name'] = $data['person_name'] ?? null;
        $this->container['deal_title'] = $data['deal_title'] ?? null;
        $this->container['owner_name'] = $data['owner_name'] ?? null;
        $this->container['person_dropbox_bcc'] = $data['person_dropbox_bcc'] ?? null;
        $this->container['deal_dropbox_bcc'] = $data['deal_dropbox_bcc'] ?? null;
        $this->container['assigned_to_user_id'] = $data['assigned_to_user_id'] ?? null;
        $this->container['file'] = $data['file'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     * @phpstan-return array<int, string>
     * @psalm-return array<int, string>
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['note'] === null) {
            $invalidProperties[] = "'note' can't be null";
        }
        if ($this->container['done'] === null) {
            $invalidProperties[] = "'done' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['participants'] === null) {
            $invalidProperties[] = "'participants' can't be null";
        }
        if ($this->container['busy_flag'] === null) {
            $invalidProperties[] = "'busy_flag' can't be null";
        }
        if ($this->container['attendees'] === null) {
            $invalidProperties[] = "'attendees' can't be null";
        }
        if ($this->container['company_id'] === null) {
            $invalidProperties[] = "'company_id' can't be null";
        }
        if ($this->container['reference_type'] === null) {
            $invalidProperties[] = "'reference_type' can't be null";
        }
        if ($this->container['reference_id'] === null) {
            $invalidProperties[] = "'reference_id' can't be null";
        }
        if ($this->container['conference_meeting_client'] === null) {
            $invalidProperties[] = "'conference_meeting_client' can't be null";
        }
        if ($this->container['conference_meeting_url'] === null) {
            $invalidProperties[] = "'conference_meeting_url' can't be null";
        }
        if ($this->container['conference_meeting_id'] === null) {
            $invalidProperties[] = "'conference_meeting_id' can't be null";
        }
        if ($this->container['add_time'] === null) {
            $invalidProperties[] = "'add_time' can't be null";
        }
        if ($this->container['marked_as_done_time'] === null) {
            $invalidProperties[] = "'marked_as_done_time' can't be null";
        }
        if ($this->container['last_notification_time'] === null) {
            $invalidProperties[] = "'last_notification_time' can't be null";
        }
        if ($this->container['last_notification_user_id'] === null) {
            $invalidProperties[] = "'last_notification_user_id' can't be null";
        }
        if ($this->container['notification_language_id'] === null) {
            $invalidProperties[] = "'notification_language_id' can't be null";
        }
        if ($this->container['active_flag'] === null) {
            $invalidProperties[] = "'active_flag' can't be null";
        }
        if ($this->container['update_time'] === null) {
            $invalidProperties[] = "'update_time' can't be null";
        }
        if ($this->container['update_user_id'] === null) {
            $invalidProperties[] = "'update_user_id' can't be null";
        }
        if ($this->container['gcal_event_id'] === null) {
            $invalidProperties[] = "'gcal_event_id' can't be null";
        }
        if ($this->container['google_calendar_id'] === null) {
            $invalidProperties[] = "'google_calendar_id' can't be null";
        }
        if ($this->container['google_calendar_etag'] === null) {
            $invalidProperties[] = "'google_calendar_etag' can't be null";
        }
        if ($this->container['calendar_sync_include_context'] === null) {
            $invalidProperties[] = "'calendar_sync_include_context' can't be null";
        }
        if ($this->container['source_timezone'] === null) {
            $invalidProperties[] = "'source_timezone' can't be null";
        }
        if ($this->container['rec_rule'] === null) {
            $invalidProperties[] = "'rec_rule' can't be null";
        }
        if ($this->container['rec_rule_extension'] === null) {
            $invalidProperties[] = "'rec_rule_extension' can't be null";
        }
        if ($this->container['rec_master_activity_id'] === null) {
            $invalidProperties[] = "'rec_master_activity_id' can't be null";
        }
        if ($this->container['series'] === null) {
            $invalidProperties[] = "'series' can't be null";
        }
        if ($this->container['created_by_user_id'] === null) {
            $invalidProperties[] = "'created_by_user_id' can't be null";
        }
        if ($this->container['location_subpremise'] === null) {
            $invalidProperties[] = "'location_subpremise' can't be null";
        }
        if ($this->container['location_street_number'] === null) {
            $invalidProperties[] = "'location_street_number' can't be null";
        }
        if ($this->container['location_route'] === null) {
            $invalidProperties[] = "'location_route' can't be null";
        }
        if ($this->container['location_sublocality'] === null) {
            $invalidProperties[] = "'location_sublocality' can't be null";
        }
        if ($this->container['location_locality'] === null) {
            $invalidProperties[] = "'location_locality' can't be null";
        }
        if ($this->container['location_admin_area_level_1'] === null) {
            $invalidProperties[] = "'location_admin_area_level_1' can't be null";
        }
        if ($this->container['location_admin_area_level_2'] === null) {
            $invalidProperties[] = "'location_admin_area_level_2' can't be null";
        }
        if ($this->container['location_country'] === null) {
            $invalidProperties[] = "'location_country' can't be null";
        }
        if ($this->container['location_postal_code'] === null) {
            $invalidProperties[] = "'location_postal_code' can't be null";
        }
        if ($this->container['location_formatted_address'] === null) {
            $invalidProperties[] = "'location_formatted_address' can't be null";
        }
        if ($this->container['org_name'] === null) {
            $invalidProperties[] = "'org_name' can't be null";
        }
        if ($this->container['person_name'] === null) {
            $invalidProperties[] = "'person_name' can't be null";
        }
        if ($this->container['deal_title'] === null) {
            $invalidProperties[] = "'deal_title' can't be null";
        }
        if ($this->container['owner_name'] === null) {
            $invalidProperties[] = "'owner_name' can't be null";
        }
        if ($this->container['person_dropbox_bcc'] === null) {
            $invalidProperties[] = "'person_dropbox_bcc' can't be null";
        }
        if ($this->container['deal_dropbox_bcc'] === null) {
            $invalidProperties[] = "'deal_dropbox_bcc' can't be null";
        }
        if ($this->container['assigned_to_user_id'] === null) {
            $invalidProperties[] = "'assigned_to_user_id' can't be null";
        }
        if ($this->container['file'] === null) {
            $invalidProperties[] = "'file' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date The due date of the activity. Format: YYYY-MM-DD
     *
     * @return self
     */
    public function setDueDate($due_date): self
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets due_time
     *
     * @return string|null
     */
    public function getDueTime()
    {
        return $this->container['due_time'];
    }

    /**
     * Sets due_time
     *
     * @param string|null $due_time The due time of the activity in UTC. Format: HH:MM
     *
     * @return self
     */
    public function setDueTime($due_time): self
    {
        $this->container['due_time'] = $due_time;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string|null $duration The duration of the activity. Format: HH:MM
     *
     * @return self
     */
    public function setDuration($duration): self
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets deal_id
     *
     * @return int|null
     */
    public function getDealId()
    {
        return $this->container['deal_id'];
    }

    /**
     * Sets deal_id
     *
     * @param int|null $deal_id The ID of the deal this activity is associated with
     *
     * @return self
     */
    public function setDealId($deal_id): self
    {
        $this->container['deal_id'] = $deal_id;

        return $this;
    }

    /**
     * Gets lead_id
     *
     * @return string|null
     */
    public function getLeadId()
    {
        return $this->container['lead_id'];
    }

    /**
     * Sets lead_id
     *
     * @param string|null $lead_id The ID of the lead in the UUID format this activity is associated with
     *
     * @return self
     */
    public function setLeadId($lead_id): self
    {
        $this->container['lead_id'] = $lead_id;

        return $this;
    }

    /**
     * Gets person_id
     *
     * @return int|null
     */
    public function getPersonId()
    {
        return $this->container['person_id'];
    }

    /**
     * Sets person_id
     *
     * @param int|null $person_id The ID of the person this activity is associated with
     *
     * @return self
     */
    public function setPersonId($person_id): self
    {
        $this->container['person_id'] = $person_id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return int|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param int|null $project_id The ID of the project this activity is associated with
     *
     * @return self
     */
    public function setProjectId($project_id): self
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets org_id
     *
     * @return int|null
     */
    public function getOrgId()
    {
        return $this->container['org_id'];
    }

    /**
     * Sets org_id
     *
     * @param int|null $org_id The ID of the organization this activity is associated with
     *
     * @return self
     */
    public function setOrgId($org_id): self
    {
        $this->container['org_id'] = $org_id;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location The address of the activity.
     *
     * @return self
     */
    public function setLocation($location): self
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets public_description
     *
     * @return string|null
     */
    public function getPublicDescription()
    {
        return $this->container['public_description'];
    }

    /**
     * Sets public_description
     *
     * @param string|null $public_description Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.
     *
     * @return self
     */
    public function setPublicDescription($public_description): self
    {
        $this->container['public_description'] = $public_description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the activity, generated when the activity was created
     *
     * @return self
     */
    public function setId($id): self
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note The note of the activity (HTML format)
     *
     * @return self
     */
    public function setNote($note): self
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets done
     *
     * @return bool
     */
    public function getDone()
    {
        return $this->container['done'];
    }

    /**
     * Sets done
     *
     * @param bool $done Whether the activity is done or not
     *
     * @return self
     */
    public function setDone($done): self
    {
        $this->container['done'] = $done;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject The subject of the activity
     *
     * @return self
     */
    public function setSubject($subject): self
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes.
     *
     * @return self
     */
    public function setType($type): self
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id The ID of the user whom the activity is assigned to
     *
     * @return self
     */
    public function setUserId($user_id): self
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets participants
     *
     * @return object[]
     */
    public function getParticipants()
    {
        return $this->container['participants'];
    }

    /**
     * Sets participants
     *
     * @param object[] $participants List of multiple persons (participants) this activity is associated with
     *
     * @return self
     */
    public function setParticipants($participants): self
    {
        $this->container['participants'] = $participants;

        return $this;
    }

    /**
     * Gets busy_flag
     *
     * @return bool
     */
    public function getBusyFlag()
    {
        return $this->container['busy_flag'];
    }

    /**
     * Sets busy_flag
     *
     * @param bool $busy_flag Marks if the activity is set as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.
     *
     * @return self
     */
    public function setBusyFlag($busy_flag): self
    {
        $this->container['busy_flag'] = $busy_flag;

        return $this;
    }

    /**
     * Gets attendees
     *
     * @return object[]
     */
    public function getAttendees()
    {
        return $this->container['attendees'];
    }

    /**
     * Sets attendees
     *
     * @param object[] $attendees The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address.
     *
     * @return self
     */
    public function setAttendees($attendees): self
    {
        $this->container['attendees'] = $attendees;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id The user's company ID
     *
     * @return self
     */
    public function setCompanyId($company_id): self
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets reference_type
     *
     * @return string
     */
    public function getReferenceType()
    {
        return $this->container['reference_type'];
    }

    /**
     * Sets reference_type
     *
     * @param string $reference_type If the activity references some other object, it is indicated here. For example, value `Salesphone` refers to activities created with Caller.
     *
     * @return self
     */
    public function setReferenceType($reference_type): self
    {
        $this->container['reference_type'] = $reference_type;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return int
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param int $reference_id Together with the `reference_type`, gives the ID of the other object
     *
     * @return self
     */
    public function setReferenceId($reference_id): self
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets conference_meeting_client
     *
     * @return string
     */
    public function getConferenceMeetingClient()
    {
        return $this->container['conference_meeting_client'];
    }

    /**
     * Sets conference_meeting_client
     *
     * @param string $conference_meeting_client The ID of the Marketplace app, which is connected to this activity
     *
     * @return self
     */
    public function setConferenceMeetingClient($conference_meeting_client): self
    {
        $this->container['conference_meeting_client'] = $conference_meeting_client;

        return $this;
    }

    /**
     * Gets conference_meeting_url
     *
     * @return string
     */
    public function getConferenceMeetingUrl()
    {
        return $this->container['conference_meeting_url'];
    }

    /**
     * Sets conference_meeting_url
     *
     * @param string $conference_meeting_url The link to join the meeting which is associated with this activity
     *
     * @return self
     */
    public function setConferenceMeetingUrl($conference_meeting_url): self
    {
        $this->container['conference_meeting_url'] = $conference_meeting_url;

        return $this;
    }

    /**
     * Gets conference_meeting_id
     *
     * @return string
     */
    public function getConferenceMeetingId()
    {
        return $this->container['conference_meeting_id'];
    }

    /**
     * Sets conference_meeting_id
     *
     * @param string $conference_meeting_id The meeting ID of the meeting provider (Zoom, MS Teams etc.) that is associated with this activity
     *
     * @return self
     */
    public function setConferenceMeetingId($conference_meeting_id): self
    {
        $this->container['conference_meeting_id'] = $conference_meeting_id;

        return $this;
    }

    /**
     * Gets add_time
     *
     * @return string
     */
    public function getAddTime()
    {
        return $this->container['add_time'];
    }

    /**
     * Sets add_time
     *
     * @param string $add_time The creation date and time of the activity in UTC. Format: YYYY-MM-DD HH:MM:SS.
     *
     * @return self
     */
    public function setAddTime($add_time): self
    {
        $this->container['add_time'] = $add_time;

        return $this;
    }

    /**
     * Gets marked_as_done_time
     *
     * @return string
     */
    public function getMarkedAsDoneTime()
    {
        return $this->container['marked_as_done_time'];
    }

    /**
     * Sets marked_as_done_time
     *
     * @param string $marked_as_done_time The date and time this activity was marked as done. Format: YYYY-MM-DD HH:MM:SS.
     *
     * @return self
     */
    public function setMarkedAsDoneTime($marked_as_done_time): self
    {
        $this->container['marked_as_done_time'] = $marked_as_done_time;

        return $this;
    }

    /**
     * Gets last_notification_time
     *
     * @return string
     */
    public function getLastNotificationTime()
    {
        return $this->container['last_notification_time'];
    }

    /**
     * Sets last_notification_time
     *
     * @param string $last_notification_time The date and time of latest notifications sent about this activity to the participants or the attendees of this activity
     *
     * @return self
     */
    public function setLastNotificationTime($last_notification_time): self
    {
        $this->container['last_notification_time'] = $last_notification_time;

        return $this;
    }

    /**
     * Gets last_notification_user_id
     *
     * @return int
     */
    public function getLastNotificationUserId()
    {
        return $this->container['last_notification_user_id'];
    }

    /**
     * Sets last_notification_user_id
     *
     * @param int $last_notification_user_id The ID of the user who triggered the sending of the latest notifications about this activity to the participants or the attendees of this activity
     *
     * @return self
     */
    public function setLastNotificationUserId($last_notification_user_id): self
    {
        $this->container['last_notification_user_id'] = $last_notification_user_id;

        return $this;
    }

    /**
     * Gets notification_language_id
     *
     * @return int
     */
    public function getNotificationLanguageId()
    {
        return $this->container['notification_language_id'];
    }

    /**
     * Sets notification_language_id
     *
     * @param int $notification_language_id The ID of the language the notifications are sent in
     *
     * @return self
     */
    public function setNotificationLanguageId($notification_language_id): self
    {
        $this->container['notification_language_id'] = $notification_language_id;

        return $this;
    }

    /**
     * Gets active_flag
     *
     * @return bool
     */
    public function getActiveFlag()
    {
        return $this->container['active_flag'];
    }

    /**
     * Sets active_flag
     *
     * @param bool $active_flag Whether the activity is active or not
     *
     * @return self
     */
    public function setActiveFlag($active_flag): self
    {
        $this->container['active_flag'] = $active_flag;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time The last update date and time of the activity. Format: YYYY-MM-DD HH:MM:SS.
     *
     * @return self
     */
    public function setUpdateTime($update_time): self
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets update_user_id
     *
     * @return int
     */
    public function getUpdateUserId()
    {
        return $this->container['update_user_id'];
    }

    /**
     * Sets update_user_id
     *
     * @param int $update_user_id The ID of the user who was the last to update this activity
     *
     * @return self
     */
    public function setUpdateUserId($update_user_id): self
    {
        $this->container['update_user_id'] = $update_user_id;

        return $this;
    }

    /**
     * Gets gcal_event_id
     *
     * @return string
     */
    public function getGcalEventId()
    {
        return $this->container['gcal_event_id'];
    }

    /**
     * Sets gcal_event_id
     *
     * @param string $gcal_event_id For the activity which syncs to Google calendar, this is the Google event ID. NB! This field is related to old Google calendar sync and will be deprecated soon.
     *
     * @return self
     */
    public function setGcalEventId($gcal_event_id): self
    {
        $this->container['gcal_event_id'] = $gcal_event_id;

        return $this;
    }

    /**
     * Gets google_calendar_id
     *
     * @return string
     */
    public function getGoogleCalendarId()
    {
        return $this->container['google_calendar_id'];
    }

    /**
     * Sets google_calendar_id
     *
     * @param string $google_calendar_id The Google calendar ID that this activity syncs to. NB! This field is related to old Google calendar sync and will be deprecated soon.
     *
     * @return self
     */
    public function setGoogleCalendarId($google_calendar_id): self
    {
        $this->container['google_calendar_id'] = $google_calendar_id;

        return $this;
    }

    /**
     * Gets google_calendar_etag
     *
     * @return string
     */
    public function getGoogleCalendarEtag()
    {
        return $this->container['google_calendar_etag'];
    }

    /**
     * Sets google_calendar_etag
     *
     * @param string $google_calendar_etag The Google calendar API etag (version) that is used for syncing this activity. NB! This field is related to old Google calendar sync and will be deprecated soon.
     *
     * @return self
     */
    public function setGoogleCalendarEtag($google_calendar_etag): self
    {
        $this->container['google_calendar_etag'] = $google_calendar_etag;

        return $this;
    }

    /**
     * Gets calendar_sync_include_context
     *
     * @return string
     */
    public function getCalendarSyncIncludeContext()
    {
        return $this->container['calendar_sync_include_context'];
    }

    /**
     * Sets calendar_sync_include_context
     *
     * @param string $calendar_sync_include_context For activities that sync to an external calendar, this setting indicates if the activity syncs with context (what are the deals, persons, organizations this activity is related to)
     *
     * @return self
     */
    public function setCalendarSyncIncludeContext($calendar_sync_include_context): self
    {
        $this->container['calendar_sync_include_context'] = $calendar_sync_include_context;

        return $this;
    }

    /**
     * Gets source_timezone
     *
     * @return string
     */
    public function getSourceTimezone()
    {
        return $this->container['source_timezone'];
    }

    /**
     * Sets source_timezone
     *
     * @param string $source_timezone The timezone the activity was created in an external calendar
     *
     * @return self
     */
    public function setSourceTimezone($source_timezone): self
    {
        $this->container['source_timezone'] = $source_timezone;

        return $this;
    }

    /**
     * Gets rec_rule
     *
     * @return string
     */
    public function getRecRule()
    {
        return $this->container['rec_rule'];
    }

    /**
     * Sets rec_rule
     *
     * @param string $rec_rule The rule for the recurrence of the activity. Is important for activities synced into Pipedrive from an external calendar. Example: \"RRULE:FREQ=WEEKLY;BYDAY=WE\"
     *
     * @return self
     */
    public function setRecRule($rec_rule): self
    {
        $this->container['rec_rule'] = $rec_rule;

        return $this;
    }

    /**
     * Gets rec_rule_extension
     *
     * @return string
     */
    public function getRecRuleExtension()
    {
        return $this->container['rec_rule_extension'];
    }

    /**
     * Sets rec_rule_extension
     *
     * @param string $rec_rule_extension Additional rules for the recurrence of the activity, extend the `rec_rule`. Is important for activities synced into Pipedrive from an external calendar.
     *
     * @return self
     */
    public function setRecRuleExtension($rec_rule_extension): self
    {
        $this->container['rec_rule_extension'] = $rec_rule_extension;

        return $this;
    }

    /**
     * Gets rec_master_activity_id
     *
     * @return int
     */
    public function getRecMasterActivityId()
    {
        return $this->container['rec_master_activity_id'];
    }

    /**
     * Sets rec_master_activity_id
     *
     * @param int $rec_master_activity_id The ID of parent activity for a recurrent activity if the current activity is an exception to recurrence rules
     *
     * @return self
     */
    public function setRecMasterActivityId($rec_master_activity_id): self
    {
        $this->container['rec_master_activity_id'] = $rec_master_activity_id;

        return $this;
    }

    /**
     * Gets series
     *
     * @return object[]
     */
    public function getSeries()
    {
        return $this->container['series'];
    }

    /**
     * Sets series
     *
     * @param object[] $series The list of recurring activity instances. It is in a structure as follows: `[{due_date: \"2020-06-24\", due_time: \"10:00:00\"}]`
     *
     * @return self
     */
    public function setSeries($series): self
    {
        $this->container['series'] = $series;

        return $this;
    }

    /**
     * Gets created_by_user_id
     *
     * @return int
     */
    public function getCreatedByUserId()
    {
        return $this->container['created_by_user_id'];
    }

    /**
     * Sets created_by_user_id
     *
     * @param int $created_by_user_id The ID of the user who created the activity
     *
     * @return self
     */
    public function setCreatedByUserId($created_by_user_id): self
    {
        $this->container['created_by_user_id'] = $created_by_user_id;

        return $this;
    }

    /**
     * Gets location_subpremise
     *
     * @return string
     */
    public function getLocationSubpremise()
    {
        return $this->container['location_subpremise'];
    }

    /**
     * Sets location_subpremise
     *
     * @param string $location_subpremise A subfield of the location field. Indicates apartment/suite number.
     *
     * @return self
     */
    public function setLocationSubpremise($location_subpremise): self
    {
        $this->container['location_subpremise'] = $location_subpremise;

        return $this;
    }

    /**
     * Gets location_street_number
     *
     * @return string
     */
    public function getLocationStreetNumber()
    {
        return $this->container['location_street_number'];
    }

    /**
     * Sets location_street_number
     *
     * @param string $location_street_number A subfield of the location field. Indicates house number.
     *
     * @return self
     */
    public function setLocationStreetNumber($location_street_number): self
    {
        $this->container['location_street_number'] = $location_street_number;

        return $this;
    }

    /**
     * Gets location_route
     *
     * @return string
     */
    public function getLocationRoute()
    {
        return $this->container['location_route'];
    }

    /**
     * Sets location_route
     *
     * @param string $location_route A subfield of the location field. Indicates street name.
     *
     * @return self
     */
    public function setLocationRoute($location_route): self
    {
        $this->container['location_route'] = $location_route;

        return $this;
    }

    /**
     * Gets location_sublocality
     *
     * @return string
     */
    public function getLocationSublocality()
    {
        return $this->container['location_sublocality'];
    }

    /**
     * Sets location_sublocality
     *
     * @param string $location_sublocality A subfield of the location field. Indicates district/sublocality.
     *
     * @return self
     */
    public function setLocationSublocality($location_sublocality): self
    {
        $this->container['location_sublocality'] = $location_sublocality;

        return $this;
    }

    /**
     * Gets location_locality
     *
     * @return string
     */
    public function getLocationLocality()
    {
        return $this->container['location_locality'];
    }

    /**
     * Sets location_locality
     *
     * @param string $location_locality A subfield of the location field. Indicates city/town/village/locality.
     *
     * @return self
     */
    public function setLocationLocality($location_locality): self
    {
        $this->container['location_locality'] = $location_locality;

        return $this;
    }

    /**
     * Gets location_admin_area_level_1
     *
     * @return string
     */
    public function getLocationAdminAreaLevel1()
    {
        return $this->container['location_admin_area_level_1'];
    }

    /**
     * Sets location_admin_area_level_1
     *
     * @param string $location_admin_area_level_1 A subfield of the location field. Indicates state/county.
     *
     * @return self
     */
    public function setLocationAdminAreaLevel1($location_admin_area_level_1): self
    {
        $this->container['location_admin_area_level_1'] = $location_admin_area_level_1;

        return $this;
    }

    /**
     * Gets location_admin_area_level_2
     *
     * @return string
     */
    public function getLocationAdminAreaLevel2()
    {
        return $this->container['location_admin_area_level_2'];
    }

    /**
     * Sets location_admin_area_level_2
     *
     * @param string $location_admin_area_level_2 A subfield of the location field. Indicates region.
     *
     * @return self
     */
    public function setLocationAdminAreaLevel2($location_admin_area_level_2): self
    {
        $this->container['location_admin_area_level_2'] = $location_admin_area_level_2;

        return $this;
    }

    /**
     * Gets location_country
     *
     * @return string
     */
    public function getLocationCountry()
    {
        return $this->container['location_country'];
    }

    /**
     * Sets location_country
     *
     * @param string $location_country A subfield of the location field. Indicates country.
     *
     * @return self
     */
    public function setLocationCountry($location_country): self
    {
        $this->container['location_country'] = $location_country;

        return $this;
    }

    /**
     * Gets location_postal_code
     *
     * @return string
     */
    public function getLocationPostalCode()
    {
        return $this->container['location_postal_code'];
    }

    /**
     * Sets location_postal_code
     *
     * @param string $location_postal_code A subfield of the location field. Indicates ZIP/postal code.
     *
     * @return self
     */
    public function setLocationPostalCode($location_postal_code): self
    {
        $this->container['location_postal_code'] = $location_postal_code;

        return $this;
    }

    /**
     * Gets location_formatted_address
     *
     * @return string
     */
    public function getLocationFormattedAddress()
    {
        return $this->container['location_formatted_address'];
    }

    /**
     * Sets location_formatted_address
     *
     * @param string $location_formatted_address A subfield of the location field. Indicates full/combined address.
     *
     * @return self
     */
    public function setLocationFormattedAddress($location_formatted_address): self
    {
        $this->container['location_formatted_address'] = $location_formatted_address;

        return $this;
    }

    /**
     * Gets org_name
     *
     * @return string
     */
    public function getOrgName()
    {
        return $this->container['org_name'];
    }

    /**
     * Sets org_name
     *
     * @param string $org_name The name of the organization this activity is associated with
     *
     * @return self
     */
    public function setOrgName($org_name): self
    {
        $this->container['org_name'] = $org_name;

        return $this;
    }

    /**
     * Gets person_name
     *
     * @return string
     */
    public function getPersonName()
    {
        return $this->container['person_name'];
    }

    /**
     * Sets person_name
     *
     * @param string $person_name The name of the person this activity is associated with
     *
     * @return self
     */
    public function setPersonName($person_name): self
    {
        $this->container['person_name'] = $person_name;

        return $this;
    }

    /**
     * Gets deal_title
     *
     * @return string
     */
    public function getDealTitle()
    {
        return $this->container['deal_title'];
    }

    /**
     * Sets deal_title
     *
     * @param string $deal_title The name of the deal this activity is associated with
     *
     * @return self
     */
    public function setDealTitle($deal_title): self
    {
        $this->container['deal_title'] = $deal_title;

        return $this;
    }

    /**
     * Gets owner_name
     *
     * @return string
     */
    public function getOwnerName()
    {
        return $this->container['owner_name'];
    }

    /**
     * Sets owner_name
     *
     * @param string $owner_name The name of the user this activity is owned by
     *
     * @return self
     */
    public function setOwnerName($owner_name): self
    {
        $this->container['owner_name'] = $owner_name;

        return $this;
    }

    /**
     * Gets person_dropbox_bcc
     *
     * @return string
     */
    public function getPersonDropboxBcc()
    {
        return $this->container['person_dropbox_bcc'];
    }

    /**
     * Sets person_dropbox_bcc
     *
     * @param string $person_dropbox_bcc The BCC email address of the person
     *
     * @return self
     */
    public function setPersonDropboxBcc($person_dropbox_bcc): self
    {
        $this->container['person_dropbox_bcc'] = $person_dropbox_bcc;

        return $this;
    }

    /**
     * Gets deal_dropbox_bcc
     *
     * @return string
     */
    public function getDealDropboxBcc()
    {
        return $this->container['deal_dropbox_bcc'];
    }

    /**
     * Sets deal_dropbox_bcc
     *
     * @param string $deal_dropbox_bcc The BCC email address of the deal
     *
     * @return self
     */
    public function setDealDropboxBcc($deal_dropbox_bcc): self
    {
        $this->container['deal_dropbox_bcc'] = $deal_dropbox_bcc;

        return $this;
    }

    /**
     * Gets assigned_to_user_id
     *
     * @return int
     */
    public function getAssignedToUserId()
    {
        return $this->container['assigned_to_user_id'];
    }

    /**
     * Sets assigned_to_user_id
     *
     * @param int $assigned_to_user_id The ID of the user to whom the activity is assigned to. Equal to `user_id`.
     *
     * @return self
     */
    public function setAssignedToUserId($assigned_to_user_id): self
    {
        $this->container['assigned_to_user_id'] = $assigned_to_user_id;

        return $this;
    }

    /**
     * Gets file
     *
     * @return object
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param object $file The file that is attached to this activity. For example, this can be a reference to an audio note file generated with Pipedrive mobile app.
     *
     * @return self
     */
    public function setFile($file): self
    {
        $this->container['file'] = $file;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @throws JsonException
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT | JSON_THROW_ON_ERROR
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @throws JsonException
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}


