<?php
/**
 * ActivityItem
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Pipedrive\versions\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pipedrive API v2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Pipedrive\versions\v2\Model;

use ArrayAccess;
use JsonException;
use JsonSerializable;
use Pipedrive\versions\v2\Traits\RawData;
use Pipedrive\versions\v2\ObjectSerializer;

/**
 * ActivityItem Class Doc Comment
 *
 * @category Class
 * @package  Pipedrive\versions\v2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ActivityItem implements ModelInterface, ArrayAccess, JsonSerializable
{
    use RawData;

    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ActivityItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string>
      * @phpsalm-var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'subject' => 'string',
        'type' => 'string',
        'owner_id' => 'int',
        'is_deleted' => 'bool',
        'add_time' => 'string',
        'update_time' => 'string',
        'deal_id' => 'int',
        'lead_id' => 'string',
        'person_id' => 'int',
        'org_id' => 'int',
        'project_id' => 'int',
        'due_date' => 'string',
        'due_time' => 'string',
        'duration' => 'string',
        'busy' => 'bool',
        'done' => 'bool',
        'marked_as_done_time' => 'string',
        'location' => '\Pipedrive\versions\v2\Model\ActivityItemLocation',
        'participants' => '\Pipedrive\versions\v2\Model\ActivityItemParticipants[]',
        'attendees' => '\Pipedrive\versions\v2\Model\ActivityItemAttendees[]',
        'conference_meeting_client' => 'string',
        'conference_meeting_url' => 'string',
        'conference_meeting_id' => 'string',
        'public_description' => 'string',
        'priority' => 'int',
        'note' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'subject' => null,
        'type' => null,
        'owner_id' => null,
        'is_deleted' => null,
        'add_time' => null,
        'update_time' => null,
        'deal_id' => null,
        'lead_id' => null,
        'person_id' => null,
        'org_id' => null,
        'project_id' => null,
        'due_date' => null,
        'due_time' => null,
        'duration' => null,
        'busy' => null,
        'done' => null,
        'marked_as_done_time' => null,
        'location' => null,
        'participants' => null,
        'attendees' => null,
        'conference_meeting_client' => null,
        'conference_meeting_url' => null,
        'conference_meeting_id' => null,
        'public_description' => null,
        'priority' => null,
        'note' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @phpstan-return array<string, string|null>
     * @psalm-return array<string, string|null>
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'subject' => 'subject',
        'type' => 'type',
        'owner_id' => 'owner_id',
        'is_deleted' => 'is_deleted',
        'add_time' => 'add_time',
        'update_time' => 'update_time',
        'deal_id' => 'deal_id',
        'lead_id' => 'lead_id',
        'person_id' => 'person_id',
        'org_id' => 'org_id',
        'project_id' => 'project_id',
        'due_date' => 'due_date',
        'due_time' => 'due_time',
        'duration' => 'duration',
        'busy' => 'busy',
        'done' => 'done',
        'marked_as_done_time' => 'marked_as_done_time',
        'location' => 'location',
        'participants' => 'participants',
        'attendees' => 'attendees',
        'conference_meeting_client' => 'conference_meeting_client',
        'conference_meeting_url' => 'conference_meeting_url',
        'conference_meeting_id' => 'conference_meeting_id',
        'public_description' => 'public_description',
        'priority' => 'priority',
        'note' => 'note'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'subject' => 'setSubject',
        'type' => 'setType',
        'owner_id' => 'setOwnerId',
        'is_deleted' => 'setIsDeleted',
        'add_time' => 'setAddTime',
        'update_time' => 'setUpdateTime',
        'deal_id' => 'setDealId',
        'lead_id' => 'setLeadId',
        'person_id' => 'setPersonId',
        'org_id' => 'setOrgId',
        'project_id' => 'setProjectId',
        'due_date' => 'setDueDate',
        'due_time' => 'setDueTime',
        'duration' => 'setDuration',
        'busy' => 'setBusy',
        'done' => 'setDone',
        'marked_as_done_time' => 'setMarkedAsDoneTime',
        'location' => 'setLocation',
        'participants' => 'setParticipants',
        'attendees' => 'setAttendees',
        'conference_meeting_client' => 'setConferenceMeetingClient',
        'conference_meeting_url' => 'setConferenceMeetingUrl',
        'conference_meeting_id' => 'setConferenceMeetingId',
        'public_description' => 'setPublicDescription',
        'priority' => 'setPriority',
        'note' => 'setNote'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'subject' => 'getSubject',
        'type' => 'getType',
        'owner_id' => 'getOwnerId',
        'is_deleted' => 'getIsDeleted',
        'add_time' => 'getAddTime',
        'update_time' => 'getUpdateTime',
        'deal_id' => 'getDealId',
        'lead_id' => 'getLeadId',
        'person_id' => 'getPersonId',
        'org_id' => 'getOrgId',
        'project_id' => 'getProjectId',
        'due_date' => 'getDueDate',
        'due_time' => 'getDueTime',
        'duration' => 'getDuration',
        'busy' => 'getBusy',
        'done' => 'getDone',
        'marked_as_done_time' => 'getMarkedAsDoneTime',
        'location' => 'getLocation',
        'participants' => 'getParticipants',
        'attendees' => 'getAttendees',
        'conference_meeting_client' => 'getConferenceMeetingClient',
        'conference_meeting_url' => 'getConferenceMeetingUrl',
        'conference_meeting_id' => 'getConferenceMeetingId',
        'public_description' => 'getPublicDescription',
        'priority' => 'getPriority',
        'note' => 'getNote'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @phpstan-return array<string, string>
     * @psalm-return array<string, string>
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     * @phpstan-var array<int|string, mixed>
     * @psalm-var array<int|string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @phpstan-param array<string, mixed>|null $data
     * @psalm-param array<string, mixed>|null $data
     * @param array|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['subject'] = $data['subject'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['owner_id'] = $data['owner_id'] ?? null;
        $this->container['is_deleted'] = $data['is_deleted'] ?? null;
        $this->container['add_time'] = $data['add_time'] ?? null;
        $this->container['update_time'] = $data['update_time'] ?? null;
        $this->container['deal_id'] = $data['deal_id'] ?? null;
        $this->container['lead_id'] = $data['lead_id'] ?? null;
        $this->container['person_id'] = $data['person_id'] ?? null;
        $this->container['org_id'] = $data['org_id'] ?? null;
        $this->container['project_id'] = $data['project_id'] ?? null;
        $this->container['due_date'] = $data['due_date'] ?? null;
        $this->container['due_time'] = $data['due_time'] ?? null;
        $this->container['duration'] = $data['duration'] ?? null;
        $this->container['busy'] = $data['busy'] ?? null;
        $this->container['done'] = $data['done'] ?? null;
        $this->container['marked_as_done_time'] = $data['marked_as_done_time'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['participants'] = $data['participants'] ?? null;
        $this->container['attendees'] = $data['attendees'] ?? null;
        $this->container['conference_meeting_client'] = $data['conference_meeting_client'] ?? null;
        $this->container['conference_meeting_url'] = $data['conference_meeting_url'] ?? null;
        $this->container['conference_meeting_id'] = $data['conference_meeting_id'] ?? null;
        $this->container['public_description'] = $data['public_description'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['note'] = $data['note'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     * @phpstan-return array<int, string>
     * @psalm-return array<int, string>
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the activity
     *
     * @return self
     */
    public function setId($id): self
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject The subject of the activity
     *
     * @return self
     */
    public function setSubject($subject): self
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of the activity
     *
     * @return self
     */
    public function setType($type): self
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return int|null
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param int|null $owner_id The ID of the user who owns the activity
     *
     * @return self
     */
    public function setOwnerId($owner_id): self
    {
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted Whether the activity is deleted or not
     *
     * @return self
     */
    public function setIsDeleted($is_deleted): self
    {
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets add_time
     *
     * @return string|null
     */
    public function getAddTime()
    {
        return $this->container['add_time'];
    }

    /**
     * Sets add_time
     *
     * @param string|null $add_time The creation date and time of the activity
     *
     * @return self
     */
    public function setAddTime($add_time): self
    {
        $this->container['add_time'] = $add_time;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string|null
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string|null $update_time The last updated date and time of the activity
     *
     * @return self
     */
    public function setUpdateTime($update_time): self
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets deal_id
     *
     * @return int|null
     */
    public function getDealId()
    {
        return $this->container['deal_id'];
    }

    /**
     * Sets deal_id
     *
     * @param int|null $deal_id The ID of the deal linked to the activity
     *
     * @return self
     */
    public function setDealId($deal_id): self
    {
        $this->container['deal_id'] = $deal_id;

        return $this;
    }

    /**
     * Gets lead_id
     *
     * @return string|null
     */
    public function getLeadId()
    {
        return $this->container['lead_id'];
    }

    /**
     * Sets lead_id
     *
     * @param string|null $lead_id The ID of the lead linked to the activity
     *
     * @return self
     */
    public function setLeadId($lead_id): self
    {
        $this->container['lead_id'] = $lead_id;

        return $this;
    }

    /**
     * Gets person_id
     *
     * @return int|null
     */
    public function getPersonId()
    {
        return $this->container['person_id'];
    }

    /**
     * Sets person_id
     *
     * @param int|null $person_id The ID of the person linked to the activity
     *
     * @return self
     */
    public function setPersonId($person_id): self
    {
        $this->container['person_id'] = $person_id;

        return $this;
    }

    /**
     * Gets org_id
     *
     * @return int|null
     */
    public function getOrgId()
    {
        return $this->container['org_id'];
    }

    /**
     * Sets org_id
     *
     * @param int|null $org_id The ID of the organization linked to the activity
     *
     * @return self
     */
    public function setOrgId($org_id): self
    {
        $this->container['org_id'] = $org_id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return int|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param int|null $project_id The ID of the project linked to the activity
     *
     * @return self
     */
    public function setProjectId($project_id): self
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param string|null $due_date The due date of the activity
     *
     * @return self
     */
    public function setDueDate($due_date): self
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets due_time
     *
     * @return string|null
     */
    public function getDueTime()
    {
        return $this->container['due_time'];
    }

    /**
     * Sets due_time
     *
     * @param string|null $due_time The due time of the activity
     *
     * @return self
     */
    public function setDueTime($due_time): self
    {
        $this->container['due_time'] = $due_time;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string|null $duration The duration of the activity
     *
     * @return self
     */
    public function setDuration($duration): self
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets busy
     *
     * @return bool|null
     */
    public function getBusy()
    {
        return $this->container['busy'];
    }

    /**
     * Sets busy
     *
     * @param bool|null $busy Whether the activity marks the assignee as busy or not in their calendar
     *
     * @return self
     */
    public function setBusy($busy): self
    {
        $this->container['busy'] = $busy;

        return $this;
    }

    /**
     * Gets done
     *
     * @return bool|null
     */
    public function getDone()
    {
        return $this->container['done'];
    }

    /**
     * Sets done
     *
     * @param bool|null $done Whether the activity is marked as done or not
     *
     * @return self
     */
    public function setDone($done): self
    {
        $this->container['done'] = $done;

        return $this;
    }

    /**
     * Gets marked_as_done_time
     *
     * @return string|null
     */
    public function getMarkedAsDoneTime()
    {
        return $this->container['marked_as_done_time'];
    }

    /**
     * Sets marked_as_done_time
     *
     * @param string|null $marked_as_done_time The date and time when the activity was marked as done
     *
     * @return self
     */
    public function setMarkedAsDoneTime($marked_as_done_time): self
    {
        $this->container['marked_as_done_time'] = $marked_as_done_time;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Pipedrive\versions\v2\Model\ActivityItemLocation|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Pipedrive\versions\v2\Model\ActivityItemLocation|null $location location
     *
     * @return self
     */
    public function setLocation($location): self
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets participants
     *
     * @return \Pipedrive\versions\v2\Model\ActivityItemParticipants[]|null
     */
    public function getParticipants()
    {
        return $this->container['participants'];
    }

    /**
     * Sets participants
     *
     * @param \Pipedrive\versions\v2\Model\ActivityItemParticipants[]|null $participants The participants of the activity
     *
     * @return self
     */
    public function setParticipants($participants): self
    {
        $this->container['participants'] = $participants;

        return $this;
    }

    /**
     * Gets attendees
     *
     * @return \Pipedrive\versions\v2\Model\ActivityItemAttendees[]|null
     */
    public function getAttendees()
    {
        return $this->container['attendees'];
    }

    /**
     * Sets attendees
     *
     * @param \Pipedrive\versions\v2\Model\ActivityItemAttendees[]|null $attendees The attendees of the activity
     *
     * @return self
     */
    public function setAttendees($attendees): self
    {
        $this->container['attendees'] = $attendees;

        return $this;
    }

    /**
     * Gets conference_meeting_client
     *
     * @return string|null
     */
    public function getConferenceMeetingClient()
    {
        return $this->container['conference_meeting_client'];
    }

    /**
     * Sets conference_meeting_client
     *
     * @param string|null $conference_meeting_client The client used for the conference meeting
     *
     * @return self
     */
    public function setConferenceMeetingClient($conference_meeting_client): self
    {
        $this->container['conference_meeting_client'] = $conference_meeting_client;

        return $this;
    }

    /**
     * Gets conference_meeting_url
     *
     * @return string|null
     */
    public function getConferenceMeetingUrl()
    {
        return $this->container['conference_meeting_url'];
    }

    /**
     * Sets conference_meeting_url
     *
     * @param string|null $conference_meeting_url The URL of the conference meeting
     *
     * @return self
     */
    public function setConferenceMeetingUrl($conference_meeting_url): self
    {
        $this->container['conference_meeting_url'] = $conference_meeting_url;

        return $this;
    }

    /**
     * Gets conference_meeting_id
     *
     * @return string|null
     */
    public function getConferenceMeetingId()
    {
        return $this->container['conference_meeting_id'];
    }

    /**
     * Sets conference_meeting_id
     *
     * @param string|null $conference_meeting_id The ID of the conference meeting
     *
     * @return self
     */
    public function setConferenceMeetingId($conference_meeting_id): self
    {
        $this->container['conference_meeting_id'] = $conference_meeting_id;

        return $this;
    }

    /**
     * Gets public_description
     *
     * @return string|null
     */
    public function getPublicDescription()
    {
        return $this->container['public_description'];
    }

    /**
     * Sets public_description
     *
     * @param string|null $public_description The public description of the activity
     *
     * @return self
     */
    public function setPublicDescription($public_description): self
    {
        $this->container['public_description'] = $public_description;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority The priority of the activity. Mappable to a specific string using activityFields API.
     *
     * @return self
     */
    public function setPriority($priority): self
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note The note of the activity
     *
     * @return self
     */
    public function setNote($note): self
    {
        $this->container['note'] = $note;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @throws JsonException
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT | JSON_THROW_ON_ERROR
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @throws JsonException
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}


